
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.sql
import jk.server.web
import symlib.chat
import jk.http.server
import jk.socket.io
import jk.log

class is WebServer:

prop db as SQLDatabase
var httpControlPort private = -1
var httpControlSecret private as string
var wsPort private = 9090
var authConfig private as DynamicMap
var chatEventConfig private as DynamicMap
var notificationForwarderConfig private as DynamicMap
var authTimeoutDelay private as long = 5
var authenticator private as Authenticator
var eventForwarder private as ChatEventForwarderOverHTTP
var forwarder private as NotificationForwarder
var engine private as ChatyEngine
var dbConfig private as DynamicMap
var certFile private as File

ctor
{
	base()
	validateConfigs()
}

main
{
	return new this().executeMain(args)
}

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "wsPort" {
		wsPort = String.toInteger(value)
		return true
	}
	if key == "httpControlSecret" {
		httpControlSecret = value
		return true
	}
	if key == "httpControlPort" {
		httpControlPort = String.toInteger(value)
		setListenPort(httpControlPort)
		return true
	}
	if "authConfig" == key {
		authConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if "chatEventConfig" == key {
		chatEventConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if "notificationForwarderConfig" == key {
		notificationForwarderConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if key == "authTimeoutDelay" {
		authTimeoutDelay = LongInteger.asLong(value)
		if authTimeoutDelay < 0:
			authTimeoutDelay = 0
		return true
	}
	if key == "dbConfig" {
		dbConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if key == "certFile" {
		certFile = File.forRelativePath(value, relativeTo)
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func getENVValue(key as string) as string:
	return Environment.getVariable(key)

func validateConfigs as bool
{
	if not dbConfig {
		dbConfig = new DynamicMap()
		dbConfig.set("type", getENVValue("DB_TYPE"))
		dbConfig.set("serverAddress", getENVValue("DB_ADDRESS"))
		dbConfig.set("username", getENVValue("DB_USERNAME"))
		dbConfig.set("password", getENVValue("DB_PASSWORD"))
		dbConfig.set("database", getENVValue("CHATY_DB_DATABASE"))
		dbConfig.set("protocol", getENVValue("DB_PROTOCOL"))
	}
	if not notificationForwarderConfig:
		notificationForwarderConfig = JSONParser.parse(getENVValue("NOTIFICATION_FORWARDER_CONFIG")) as DynamicMap
	if not authConfig:
		authConfig = JSONParser.parse(getENVValue("AUTH_CONFIG")) as DynamicMap
	if not chatEventConfig:
		chatEventConfig = JSONParser.parse(getENVValue("CHAT_EVENT_CONFIG")) as DynamicMap
	var atd = LongInteger.asLong(getENVValue("AUTH_TIME_DELAY"))
	if atd > 0:
		authTimeoutDelay = atd
	var mtd = LongInteger.asLong(getENVValue("MAINTENANCE_TIMER_DELAY"))
	if mtd > 0:
		setMaintenanceTimerDelay(mtd)
	setEnableDebugMessages(Boolean.asBoolean(getENVValue("DEBUG")))
	var wp = String.toInteger(getENVValue("WS_PORT"))
	if wp > 0:
		wsPort = wp
	var hcp = String.toInteger(getENVValue("HTTP_CONTROL_PORT"))
	if hcp > 0:
		httpControlPort = hcp
	if String.isEmpty(httpControlSecret):
		httpControlSecret = getENVValue("HTTP_CONTROL_SECRET")
	if not getAlsoPrintOnConsole();
		setAlsoPrintOnConsole(Boolean.asBoolean(getENVValue("PRINT_ON_CONSOLE")))
	var cf = getENVValue("CERT_FILE")
	if String.isNotEmpty(cf) {
		var pfile = Environment.getAppDirectory()
		certFile = File.forRelativePath(cf, pfile)
	}
	return true
}

func initializeApplication override as bool
{
	assert base.initializeApplication()
	assert dbConfig:
		Log.error(ctx, "Please configure the database setting.")
	assert db = initializeSQLDatabase(dbConfig):
		Log.error(ctx, "Unable to connect to database: `" .. String.asString(dbConfig) .. "'")
	assert authConfig:
		Log.error(ctx, "Please configure authentication service with .config properety 'authConfig' or environment variable 'AUTH_CONFIG'.")
	authenticator = AuthenticatorOverHTTP.forConfiguration(authConfig)
	assert authenticator:
		Log.error(ctx, "Failed to initialize authenticator. Please check your authentication service configuration.")
	if chatEventConfig:
		eventForwarder = ChatEventForwarderOverHTTP.forConfiguration(chatEventConfig)
	assert notificationForwarderConfig:
		Log.error(ctx, "Please configure notification forwarder service with .config properety 'notificationForwarderConfig' or environment variable 'NOTIFICATION_FORWARDER_CONFIG'.")
	forwarder = NotificationForwarderOverHTTP.forConfiguration(notificationForwarderConfig)
	assert forwarder:
		Log.error(ctx, "Failed to initialize notification forwarder. Please check your notification forwarder service configuration.")
	return true
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert getListenPort() != wsPort:
		Log.error(ctx, "WebSocket port should not be the same with HTTP port.")
	engine = ChatyEngine.create(wsPort, getDb(), authenticator, eventForwarder, forwarder, ctx)
	assert engine:
		Log.error(ctx, "Failed to create chat engine instance.")
	engine.setAuthTimeoutDelay(authTimeoutDelay)
	if httpControlPort > 0 {
		if String.isNotEmpty(httpControlSecret) {
			server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
				assert String.equals(httpControlSecret, req.getHeader("x-http-control-secret")):
					req.sendJSONObject(JSONResponse.forNotAuthenticated())
				next()
			})
		}
		var rootHandler = new HTTPControlAPIHandler()
		rootHandler.setEngine(engine)
		server.pushRequestHandler(rootHandler)
	}
	return true
}

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) override as bool
{
	assert engine.initializeEngine(ioManager)
	var wsserver = engine.getServer()
	if wsserver && certFile:
		wsserver.setCertFile(certFile)
	return true
}

func initializeSQLDatabase(config as DynamicMap) as SQLDatabase
{
	config.set("sslMode", MySQLDatabase.SSL_MODE_NONE)
	config.set("enableUTF8",true)
	return SQLDatabaseProvider.getDatabase(ctx, config)
}
