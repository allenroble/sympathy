
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.log
import jk.ws.server
import jk.json
import jk.socket.io
import jk.random
import jk.time
import jk.md5
import jk.thread

class abstract:

class UserConnection
{
	prop userId as string
	var connectionMap private as DynamicMap
	var timeStamp private as long = 0

	ctor:
		connectionMap = new DynamicMap()

	func getConnection(connectionId as string) as ChatConnectionHandler
	{
		var connection = connectionMap.get(connectionId) as ChatConnectionHandler
		assert connection && connection.isOpen():
			removeConnectionForId(connectionId)
		return connection
	}

	func addConnection(connection as ChatConnectionHandler)
	{
		assert connection && connection.isOpen()
		connectionMap.setObject(connection.getConnectionId(), connection)
		timeStamp = -1
	}

	func removeConnectionForId(connectionId as string)
	{
		assert String.isNotEmpty(connectionId)
		connectionMap.remove(connectionId)
		if not isOnline():
			timeStamp = SystemClock.asUTCSeconds()
	}

	func removeConnection(connection as ChatConnectionHandler)
	{
		assert connection
		removeConnectionForId(connection.getConnectionId())
	}

	func getConnectionCount as int
	{
		removeBrokenConnections()
		return connectionMap.getCount()
	}

	func getConnectionIds as vector<string>:
		return connectionMap.getKeys()

	func isOnline as bool:
		return getConnectionCount() > 0

	func getLastActive as long:
		return timeStamp

	func removeBrokenConnections private
	{
		assert connectionMap
		foreach connectionId in getConnectionIds() {
			var connection = connectionMap.get(connectionId) as ChatConnectionHandler
			if not connection || not connection.isOpen():
				removeConnectionForId(connectionId)
		}
	}
}

class NotificationForwarderTask is Runnable
{
	prop ctx as LoggingContext
	prop data as DynamicMap
	prop forwarder as NotificationForwarder

	func run
	{
		assert forwarder && data
		forwarder.forward(data, func(response as DynamicMap, error as Error) {
			assert not error:
				Log.error(ctx, "Forward Notification Error: " .. error.toString())
			Log.info(ctx, "Forward Notification: " .. JSONEncoder.encode(response))
		})
	}
}

prop forwarder as NotificationForwarder
prop server as WSServer
prop port = 9090
var ctx protected as LoggingContext
var json protected as JSONEncoder
var mgr private as IOManager
var connectionMap private as DynamicMap
var connectionSize private as int
var authTimeoutDelay private as long = 5
var random private as Random

ctor
{
	connectionMap = new DynamicMap()
	connectionSize = 0
	random = new Random()
	json = new JSONEncoder()
	json.setNiceFormatting(false)
}

func setCtx(ctx as LoggingContext):
	this.ctx = ctx

func getIOManager as IOManager:
	return mgr

func setAuthTimeoutDelay(authTimeoutDelay as long)
{
	this.authTimeoutDelay = authTimeoutDelay
	if this.authTimeoutDelay < 0:
		this.authTimeoutDelay = 0
}

func getAuthTimeoutDelay as long:
	return authTimeoutDelay

func startTimer(delay as long, handler as function<bool>) as IOManagerTimer
{
	assert mgr
	return mgr.startTimer(delay, handler)
}

func initializeEngine(mgr as IOManager) as bool
{
	assert mgr:
		logError("No IOManager instance specified.")
	if not server {
		logWarning("No WebSocket server instance specified. Creating a new instance to listen on port: " .. String.forInteger(port) .. ".")
		server = new WSServer()
	}
	server.setPort(port)
	var engine final = this
	server.setCreateConnectionHandlerObject(func as WSServerConnectionHandler {
		return new ChatConnectionHandler().setEngine(engine).setLogContext(ctx)
	})
	assert server.initialize(mgr, ctx):
		logError("Failed to initialize WebSocket server.")
	assert initialize():
		logError("Failed to initialize chat engine.")
	this.mgr = mgr
	logInfo("Successfully initialized chat engine.")
	return true
}

func generateId virtual as string:
	return MD5Encoder.encode(String.forInteger(SystemClock.asUTCSeconds()) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)))

func logError(message as string):
	Log.error(ctx, VALUE "__THIS__" .. ": " .. message)

func logWarning(message as string):
	Log.warning(ctx, VALUE "__THIS__" .. ": " .. message)

func logInfo(message as string):
	Log.info(ctx, VALUE "__THIS__" .. ": " .. message)

func logDebug(message as string):
	Log.debug(ctx, VALUE "__THIS__" .. ": " .. message)

func onUserDisconnect(user as ChatUser, connection as ChatConnectionHandler)
{
	assert user
	removeUserConnection(user.getUserId(), connection)
	connectionSize--
	getUserCount(func(count as int) {
		logDebug("Connection closed. Now: (" .. String.forInteger(connectionSize) .. "/" .. String.forInteger(count) .. ") connected")
	})
	var engine final = this
	user.setEngine(engine)
	if not user.isOnline() {
		logDebug("User: '" .. user.getUserId() .. "' is now offline with last active on: " .. String.forLongInteger(getUserLastActive(user.getUserId())))
		onUserOffline(user)
	}
}

func addUserConnection(userId as string, connection as ChatConnectionHandler) private
{
	assert String.isNotEmpty(userId) && connection
	var uc = connectionMap.get(userId) as UserConnection
	if not uc {
		uc = new UserConnection()
		uc.setUserId(userId)
		connectionMap.setObject(userId, uc)
	}
	uc.addConnection(connection)
}

func removeUserConnection(userId as string, connectionId as string)
{
	var uc = assert connectionMap.get(userId) as UserConnection
	uc.removeConnectionForId(connectionId)
}

func removeUserConnection(userId as string, connection as ChatConnectionHandler)
{
	var uc = assert connectionMap.get(userId) as UserConnection
	uc.removeConnection(connection)
}

func onDataReceived(data as buffer, connection as ChatConnectionHandler)
{
	assert connection
	assert data:
		connection.close()
	var user = connection.getUser()
	if not user {
		onAuthenticateConnection(data, connection)
		return
	}
	onParseData(data, connection)
}

func onAuthenticateConnection(authData as buffer, connection as ChatConnectionHandler) private
{
	var engine final = this
	authenticateConnection(authData, func(user as ChatUser) {
		assert user && String.isNotEmpty(user.getUserId()) {
			logError("No ChatUser instance returned by authenticateConnection() method. Closing the connection instead.")
			connection.close()
		}
		user.setEngine(engine)
		connection.setUser(user)
		loop {
			var connectionId = generateId()
			assert String.isNotEmpty(connectionId) {
				logError("No connectionId returned by generateId() method. Closing the connection instead.")
				connection.close()
			}
			if not user.getConnection(connectionId) {
				connection.setConnectionId(connectionId)
				break
			}
		}
		addUserConnection(user.getUserId(), connection)
		connectionSize++
		getUserCount(func(count as int) {
			logDebug("New connection. Now: (" .. String.forInteger(connectionSize) .. "/" .. String.forInteger(count) .. ") connected")
		})
		createAcknowledgeCommand(user.getUserId(), func(message as ChatMessage) {
			assert message {
				logError("Failed to create an acknowledge command message that the client is connected. Closing the connection instead.")
				connection.close()
			}
			assert message.getMessageType() == ChatMessage.COMMAND_TYPE {
				logError("Acknowledge command message not of type command. Closing the connection instead.")
				connection.close()
			}
			var r = connection.sendMessage(message)
			assert r > 0 {
				logError("Failed to send message. Closing the connection instead.")
				connection.close()
			}
			if user.getConnectionCount() == 1 {
				logDebug("User: '" .. user.getUserId() .. "' is now online")
				onUserOnline(user)
			}
		})
	})
}

func onParseData(data as buffer, connection as ChatConnectionHandler) private
{
	assert data {
		logError("No data buffer received. Closing the connection instead.")
		connection.close()
	}
	var message = assert createMessage(data) {
		logError("No ChatMessage instance returned by createMessage() method. Closing the connection instead.")
		connection.close()
	}
	assert String.isEmpty(message.getMessageId()) {
		logError("ChatMessage instance returned by createMessage() method should not be saved and have message id yet. Closing the connection instead.")
		connection.close()
	}
	switch message.getMessageType() {
		case ChatMessage.COMMAND_TYPE {
			onNewCommandMessage(message, connection)
			break
		}
		case ChatMessage.DATA_TYPE {
			onNewDataMessage(message, connection)
			break
		}
		default {
			logError("ChatMessage message type is invalid. Closing the connection instead.")
			connection.close()
		}
	}
}

func onNewCommandMessage(message as ChatMessage, connection as ChatConnectionHandler) private
{
	var creator = assert connection.getUser()
	assert message && message.getMessageType() == ChatMessage.COMMAND_TYPE
	var commandMap = assert JSONParser.parse(message.getData()) as DynamicMap
	var command = commandMap.getString("command")
	assert String.isNotEmpty(command)
	onProcessNewCommandMessage(command, creator, message, func(response as ChatMessage, error as Error) {
		assert not error {
			logError("Closing the connection due to error from processing new command message: " .. error.toString())
			connection.close()
		}
		assert response:
			logWarning("No response for command: '" .. command .. "'")
		var r = connection.sendMessage(response)
		assert r > 0 {
			logError("Failed to send response message. Closing the connection instead.")
			connection.close()
		}
	})
}

func onNewDataMessage(message as ChatMessage, connection as ChatConnectionHandler) private
{
	assert message && message.getMessageType() == ChatMessage.DATA_TYPE:
		connection.close()
	var user = assert connection.getUser():
		connection.close()
	var creatorUserId = user.getUserId()
	assert String.isNotEmpty(creatorUserId):
		connection.close()
	var channelId = message.getChannelId()
	assert String.isNotEmpty(channelId) {
		logError("New message with no channel id. Closing the connection instead.")
		connection.close()
	}
	getChannel(channelId, func(channel as ChatChannel) {
		assert channel && String.equals(channel.getChannelId(), channelId) {
			logError("Internal error: fetched channel has different channel id. Closing the connection instead.")
			var data = new DynamicMap()
			data.setString("command", "message_saved")
			data.setString("channelId", channelId)
			data.setString("status", "error")
			data.setString("code", "invalid_channel_id")
			data.setString("message", "Invalid channel id")
			var v = new DynamicMap()
			v.setInteger("messageType", ChatMessage.COMMAND_TYPE)
			v.setObject("data", data)
			var reply = assert createMessage(String.toUTF8Buffer(json.execute(v)))
			var r = connection.sendMessage(reply)
			assert r > 0 {
				logError("Failed to send message. Closing the connection instead.")
				connection.close()
			}
		}
		var recipients = getRecipientIdsForChannelId(channelId)
		assert recipients && recipients.getSize() > 1 {
			var data = new DynamicMap()
			data.setString("command", "message_saved")
			data.setString("channelId", channelId)
			data.setString("status", "ok")
			var v = new DynamicMap()
			v.setInteger("messageType", ChatMessage.COMMAND_TYPE)
			v.setObject("data", data)
			var reply = assert createMessage(String.toUTF8Buffer(json.execute(v)))
			var r = connection.sendMessage(reply)
			assert r > 0 {
				logError("Failed to send message. Closing the connection instead.")
				connection.close()
			}
		}
		var recipientMap = new DynamicMap()
		foreach userId in recipients.toVectorOfStrings():
			recipientMap.setString(userId, userId)
		assert recipientMap.getCount() > 1 {
			var data = new DynamicMap()
			data.setString("command", "message_saved")
			data.setString("channelId", channelId)
			data.setString("status", "ok")
			var v = new DynamicMap()
			v.setInteger("messageType", ChatMessage.COMMAND_TYPE)
			v.setObject("data", data)
			var reply = assert createMessage(String.toUTF8Buffer(json.execute(v)))
			var r = connection.sendMessage(reply)
			assert r > 0 {
				logError("Failed to send message. Closing the connection instead.")
				connection.close()
			}
		}
		assert recipientMap.containsKey(creatorUserId) {
			var data = new DynamicMap()
			data.setString("command", "message_saved")
			data.setString("channelId", channelId)
			data.setString("status", "error")
			data.setString("code", "user_does_not_belong")
			data.setString("message", "You're not part of this conversation anymore.")
			var v = new DynamicMap()
			v.setInteger("messageType", ChatMessage.COMMAND_TYPE)
			v.setObject("data", data)
			var reply = assert createMessage(String.toUTF8Buffer(json.execute(v)))
			var r = connection.sendMessage(reply)
			assert r > 0 {
				logError("Failed to send message. Closing the connection instead.")
				connection.close()
			}
		}
		onSaveMessage(message, channel, connection)
	})
}

func createChannelAndGetId(recipients as DynamicVector, creatorUserId as string, title as string, callback as function<void, string>)
{
	createAndSaveChannel(recipients, creatorUserId, title, func(channel as ChatChannel) {
		assert channel {
			logError("No ChatChannel instance returned by createAndSaveChannel() method.")
			callback(null)
		}
		var channelId = channel.getChannelId()
		assert String.isNotEmpty(channelId) {
			logError("Created ChatChannel instance returned by createAndSaveChannel() method doesn't have channelId.")
			callback(null)
		}
		logDebug("New channel '" .. channelId .. "' created.")
		callback(channelId)
	})
}

func onSaveMessage(message as ChatMessage, channel as ChatChannel, connection as ChatConnectionHandler) private
{
	channel.setEngine(this)
	var user = assert connection.getUser() {
		logError("Current is not authenticated. Closing the connection instead.")
		connection.close()
	}
	var creatorUserId = user.getUserId()
	assert String.isNotEmpty(creatorUserId) {
		logError("Current user has no user id. Closing the connection instead.")
		connection.close()
	}
	saveMessage(message, channel, creatorUserId, func(error as Error) {
		assert not error {
			logError("Internal error: '" .. error.toString() .. "'. Closing the connection instead.")
			connection.close()
		}
		assert String.isNotEmpty(message.getMessageId()) {
			logError("Internal error: Saved message has no message id generated. Closing the connection instead.")
			connection.close()
		}
		assert String.equals(message.getChannelId(), channel.getChannelId()) {
			logError("Internal error: Saved message has different channel id. Closing the connection instead.")
			connection.close()
		}
		channel.onNewDataMessage(message, connection)
	})
}

func getUserConnection(userId as string, connectionId as string) as ChatConnectionHandler
{
	assert String.isNotEmpty(userId) && String.isNotEmpty(connectionId)
	var uc = assert connectionMap.get(userId) as UserConnection
	return uc.getConnection(connectionId)
}

func getUserConnectionCount(userId as string) as int
{
	assert String.isNotEmpty(userId)
	var uc = assert connectionMap.get(userId) as UserConnection
	return uc.getConnectionCount()
}

func getUserConnectionIds(userId as string) as vector<string>
{
	assert String.isNotEmpty(userId)
	var uc = assert connectionMap.get(userId) as UserConnection
	return uc.getConnectionIds()
}

func isUserOnline(userId as string) as bool
{
	assert String.isNotEmpty(userId)
	var uc = assert connectionMap.get(userId) as UserConnection
	return uc.isOnline()
}

func getUserLastActive(userId as string) as long
{
	assert String.isNotEmpty(userId)
	var uc = assert connectionMap.get(userId) as UserConnection
	return uc.getLastActive()
}

func onBeforeBroadcastMessage(message as ChatMessage, callback as function<void, ChatMessage>) virtual:
	callback(message)

func broadcastMessage(message as ChatMessage)
{
	onBeforeBroadcastMessage(message, func(modifiedMessage as ChatMessage) {
		assert modifiedMessage
		var recipients = modifiedMessage.getRecipients()
		assert recipients && recipients.getSize() > 0
		var rsm = getReadStatusAsMapForChannelId(modifiedMessage.getChannelId())
		var creatorUserId = modifiedMessage.getCreatorUserId()
		if String.isNotEmpty(creatorUserId) && recipients.contains(creatorUserId):
			recipients.removeValue(creatorUserId)
		foreach userId in recipients.toVectorOfStrings() {
			if not isUserOnline(userId) {
				logDebug("User: '" .. userId .. "' is offline with last active on: " .. String.forLongInteger(getUserLastActive(userId)) .. ".")
				continue
			}
			var brokenConnections = new vector<string>
			if rsm:
				modifiedMessage.setUnreadCount(rsm.getLongInteger(userId))
			foreach connectionId in getUserConnectionIds(userId) {
				var connection = getUserConnection(userId, connectionId)
				if not connection || not connection.isOpen() {
					brokenConnections += connectionId
					continue
				}
				var r = connection.sendMessage(modifiedMessage)
				if r < 1:
					brokenConnections += connectionId
			}
			foreach connectionId in brokenConnections:
				removeUserConnection(userId, connectionId)
		}
		if forwarder {
			var data = new DynamicMap()
			data.setString("message", modifiedMessage.getMessage())
			data.setString("creatorUserId", creatorUserId)
			data.setObject("recipients", recipients)
			data.setString("channelId", modifiedMessage.getChannelId())
			data.setString("externalId", modifiedMessage.getExternalId())
			data.setString("messageId", modifiedMessage.getMessageId())
			var task = new NotificationForwarderTask()
			task.setForwarder(forwarder)
			task.setData(data)
			assert Thread.start(task):
				Log.error(ctx, "Failed to start notification forwarder background task")
		}
	})
}

func initialize virtual as bool:
	return true

func createAcknowledgeCommand(userId as string, callback as function<void, ChatMessage>)
{
	var message = new ChatMessage()
	message.setMessageType(ChatMessage.COMMAND_TYPE)
	var data = new DynamicMap()
	data.setString("command", "authentication_acknowledged")
	data.setString("userId", userId)
	message.setData(json.execute(data))
	callback(message)
}

func createMessage(data as buffer) as ChatMessage:
	return ChatMessage.forBuffer(data)

func createMessageFromMap(data as DynamicMap) as ChatMessage:
	return ChatMessage.forDynamicMap(data)

func getUserCount(callback as function<void, int>) virtual:
	callback(0)

func onUserOnline(user as ChatUser) virtual:
	;

func onUserOffline(user as ChatUser) virtual:
	;

func authenticateConnection(authData as buffer, callback as function<void, ChatUser>) abstract
func onProcessNewCommandMessage(command as string, creator as ChatUser, message as ChatMessage, callback as function<void, ChatMessage, Error>) abstract
func getChannel(channelId as string, callback as function<void, ChatChannel>) abstract
func getRecipientIdsForChannelId(channelId as string) abstract as DynamicVector
func createAndSaveChannel(recipients as DynamicVector, channelCreatorUserId as string, title as string, callback as function<void, ChatChannel>) abstract
func saveMessage(message as ChatMessage, channel as ChatChannel, creatorUserId as string, callback as function<void, Error>) abstract
func getReadStatusAsMapForUserId(userId as string) abstract as DynamicMap
func getReadStatusAsMapForChannelId(channelId as string) abstract as DynamicMap
