
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import cape

const COMMAND_TYPE = 1
const DATA_TYPE = 2

func forMessageSavedCommand(message as this, channel as ChatChannel) static as this
{
	assert message && channel
	var v = new this()
	v.setMessageType(COMMAND_TYPE)
	var data = new DynamicMap()
	data.set("command", "message_saved")
	data.set("status", "ok")
	data.set("sendId", message.getSendId())
	data.set("messageId", message.getMessageId())
	data.set("message", message.getMessage())
	data.set("attachmentFileName", message.getAttachmentFileName())
	data.set("attachmentURL", message.getAttachmentURL())
	data.set("creatorUserId", message.getCreatorUserId())
	data.set("timeStampCreated", message.getTimeStampCreated())
	data.set("timeStampLastUpdated", message.getTimeStampLastUpdated())
	data.set("channelCreatorUserId", channel.getChannelCreatorUserId())
	data.set("title", channel.getTitle())
	data.set("channelId", channel.getChannelId())
	data.set("externalId", channel.getExternalId())
	data.set("recipients", message.getRecipients())
	v.setData(JSONEncoder.encode(data))
	return v
}

func forBuffer(data as buffer) static as this
{
	assert data && SIZE(data) > 0
	var m = assert JSONParser.parse(String.forUTF8Buffer(data)) as DynamicMap
	var t = m.getInteger("messageType")
	assert t == COMMAND_TYPE || t == DATA_TYPE
	var v = new this()
	v.setMessageType(t)
	var d = m.getString("data")
	var dmap = assert JSONParser.parse(d) as DynamicMap
	v.setCreatorUserId(dmap.getString("creatorUserId"))
	v.setData(d)
	if t == DATA_TYPE:
		v.setMessageId(dmap.getString("messageId"))
	v.setChannelId(dmap.getString("channelId"))
	v.setAttachmentFileName(dmap.getString("attachmentFileName"))
	v.setAttachmentURL(dmap.getString("attachmentURL"))
	v.setChannelCreatorUserId(dmap.getString("channelCreatorUserId"))
	v.setExternalId(dmap.getString("externalId"))
	v.setTitle(dmap.getString("title"))
	v.setUnreadCount(dmap.getLongInteger("unreadCount"))
	v.setTimeStampCreated(dmap.getLongInteger("timeStampCreated"))
	v.setTimeStampLastUpdated(dmap.getLongInteger("timeStampLastUpdated"))
	v.setRecipients(dmap.getDynamicVector("recipients"))
	return v
}

prop data as string
prop title as string
prop channelCreatorUserId as string
prop channelId as string
prop externalId as string
prop messageId as string
prop attachmentFileName as string
prop attachmentURL as string
prop creatorUserId as string
prop timeStampCreated as long
prop timeStampLastUpdated as long
prop unreadCount as long
var recipientMap private as DynamicMap
var messageType private as int
var json private as JSONEncoder

func getMessage as string
{
	var d = assert JSONParser.parse(data) as DynamicMap
	return d.getString("message")
}

ctor
{
	json = new JSONEncoder()
	json.setNiceFormatting(false)
}

func getSendId as string
{
	assert messageType == DATA_TYPE
	var d = assert JSONParser.parse(data) as DynamicMap
	return d.getString("sendId")
}

func removeSendId
{
	assert messageType == DATA_TYPE
	var d = assert JSONParser.parse(data) as DynamicMap
	d.remove("sendId")
}

func setMessageType(messageType as int) as this
{
	assert messageType == COMMAND_TYPE || messageType == DATA_TYPE
	this.messageType = messageType
	return this
}

func getMessageType as int:
	return messageType

func setRecipients(recipients as DynamicVector)
{
	assert recipients && recipients.getSize() > 0
	foreach userId in recipients.toVectorOfStrings():
		addRecipient(userId)
}

func addRecipient(userId as string)
{
	if not recipientMap:
		recipientMap = new DynamicMap()
	assert not recipientMap.containsKey(userId)
	recipientMap.set(userId, userId)
}

func removeRecipient(userId as string)
{
	assert recipientMap
	recipientMap.remove(userId)
}

func getRecipients as DynamicVector
{
	assert recipientMap
	return DynamicVector.forStringVector(recipientMap.getKeys())
}

func toBuffer as buffer
{
	var v = new DynamicMap()
	v.set("messageType", messageType)
	var d = JSONParser.parse(data) as DynamicMap
	if not d:
		d = new DynamicMap()
	if String.isNotEmpty(title):
		d.set("title", title)
	if String.isNotEmpty(channelCreatorUserId):
		d.set("channelCreatorUserId", channelCreatorUserId)
	if String.isNotEmpty(creatorUserId):
		d.set("creatorUserId", creatorUserId)
	if String.isNotEmpty(messageId):
		d.set("messageId", messageId)
	if String.isNotEmpty(channelId):
		d.set("channelId", channelId)
	if String.isNotEmpty(externalId):
		d.set("externalId", externalId)
	if String.isNotEmpty(attachmentFileName):
		d.set("attachmentFileName", attachmentFileName)
	if String.isNotEmpty(attachmentURL):
		d.set("attachmentURL", attachmentURL)
	var recipients = getRecipients()
	if recipients:
		d.set("recipients", recipients)
	if timeStampCreated > 0:
		d.set("timeStampCreated", timeStampCreated)
	if timeStampLastUpdated > 0:
		d.set("timeStampLastUpdated", timeStampLastUpdated)
	if unreadCount > 0:
		d.set("unreadCount", unreadCount)
	v.set("data", JSONEncoder.encode(d))
	return String.toUTF8Buffer(json.execute(v))
}
