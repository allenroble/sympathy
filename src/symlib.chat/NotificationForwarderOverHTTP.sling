
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.web.json
import jk.json

class is JSONAPIClient is NotificationForwarder:

func forConfiguration(notificationForwarderConfig as DynamicMap) static as this
{
	assert notificationForwarderConfig
	var notificationForwarderBaseURL = notificationForwarderConfig.getString("notificationForwarderBaseURL")
	assert String.isNotEmpty(notificationForwarderBaseURL)
	var forwardURL = notificationForwarderConfig.getString("forwardURL")
	assert String.isNotEmpty(forwardURL)
	var accessTokenKey = notificationForwarderConfig.getString("accessTokenKey")
	assert String.isNotEmpty(accessTokenKey)
	var accessToken = notificationForwarderConfig.getString("accessToken")
	assert String.isNotEmpty(accessToken)
	var v = new this()
	v.setNotificationForwarderBaseURL(notificationForwarderBaseURL)
	v.setForwardURL(forwardURL)
	v.setAccessTokenKey(accessTokenKey)
	v.setAccessToken(accessToken)
	return v
}

prop notificationForwarderBaseURL as string
prop accessTokenKey as string
prop accessToken as string
prop forwardURL as string

func getFullURL(api as string) override as string
{
	var url = notificationForwarderBaseURL
	if String.isEmpty(url):
		url = "/"
	if url == "/" {
		if String.startsWith(api, "/"):
			return api
		return url .. api
	}
	if String.endsWith(url, "/") {
		if String.startsWith(api, "/"):
			return url .. String.getEndOfString(api, 1)
		return url .. api
	}
	if String.startsWith(api, "/"):
		return url .. api
	return url .. "/" .. api
}

func post(url as string, headers as KeyValueList<string,string>, data as DynamicMap, callback as function<void, DynamicMap, Error>) private
{
	doSendRequest("POST", getFullURL(url), headers, String.toUTF8Buffer(JSONEncoder.encode(data)), func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			callback(null, Error.instance("failed_to_connect", "Failed to connect to server"))
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forMessage("Invalid JSON Format from notification forward server: '" .. String.asString(body) .. "'"))
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func forward(data as DynamicMap, callback as function<void, DynamicMap, Error>)
{
	assert data:
		callback(null, Error.instance("no_notification_data", "No notification data"))
	var headers = new KeyValueList<string,string>()
	if String.isNotEmpty(accessTokenKey) && String.isNotEmpty(accessToken):
		headers.add(accessTokenKey, accessToken)
	headers.add("Content-Type", "application/json")
	post(forwardURL, headers, data, func(response as DynamicMap, e as Error) {
		assert not e:
			callback(null, e)
		callback(response, null)
	})
}
