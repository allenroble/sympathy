
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.json
import jk.server.web
import jk.http.server
import jk.ws.server
import jk.socket.io

class is WebServer:

var secretKey as string
var enginePort = 8081
var smsEngine as SMSEngine

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "secretKey" {
		secretKey = value
		return true
	}
	if key == "enginePort" {
		enginePort = Integer.asInteger(value)
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert String.isNotEmpty(secretKey):
		Log.error(ctx, "No secret key was set")

	// Initialize SMSEngine

	smsEngine = new SMSEngine()
	smsEngine.setAuthenticateConnectionCallback(func(data as buffer) as bool {
		var cred = String.forUTF8Buffer(data)
		return String.equals(secretKey, cred)
	})
	smsEngine.setCtx(ctx)
	server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
		if req.isPOST() {
			var data = assert req.getBodyJSONMap():
				req.sendJSONObject(HTTPServerJSONResponse.forMissingData())
			var type = data.getInteger("type")
			assert type == SMSMessage.UNKNOWN_TYPE || type == SMSMessage.DATA_TYPE:
				req.sendJSONObject(HTTPServerJSONResponse.forErrorMessage("Invalid type"))
			var priority = data.getInteger("priority", -1)
			assert priority > 0:
				req.sendJSONObject(HTTPServerJSONResponse.forErrorMessage("Invalid priority"))
			var message = data.getString("message")
			assert String.isNotEmpty(message):
				req.sendJSONObject(HTTPServerJSONResponse.forErrorMessage("Invalid or empty message"))
			var recipients = assert data.getDynamicVector("recipients"):
				req.sendJSONObject(HTTPServerJSONResponse.forErrorMessage("Invalid or no recipients"))
			var smsMessage = new SMSMessage()
			smsMessage.setData(data)
			assert smsMessage.initialize():
				req.sendJSONObject(HTTPServerJSONResponse.forInvalidData())
			smsEngine.sendMessage(smsMessage)
			req.sendJSONObject(HTTPServerJSONResponse.forOk())
			return
		}
		next()
	})
	return true
}

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) override as bool
{
	var server = new WSServer()
	server.setPort(enginePort)
	server.setCreateConnectionHandlerObject(func as WSServerConnectionHandler {
		return new SMSConnectionHandler().setEngine(smsEngine)
	})
	assert server.initialize(ioManager, ctx):
		Log.error(ctx, "Failed to initialize SMSServer.")
	return true
}

main:
	return new this().executeMain(args)
