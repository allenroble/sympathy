
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.log
import jk.json

class:

class ConnectionManager
{
	ctor(prnt as parent)
	{
		op = prnt
		index = 0
		connections = new vector<SMSConnectionHandler>
	}

	var connections as vector<SMSConnectionHandler>
	var index as int
	var op as parent

	func add(connection as SMSConnectionHandler)
	{
		assert connection
		Vector.append(connections, connection)
		op.logDebug("New connection. Now: (" .. String.forInteger(sizeof connections) .. ") connected")
	}

	func remove(connection as SMSConnectionHandler)
	{
		assert connection
		Vector.removeValue(connections, connection)
		op.logDebug("Connection closed. Now: (" .. String.forInteger(sizeof connections) .. ") connected")
	}

	func sendMessage(message as buffer) as bool
	{
		var sent as bool
		var s = sizeof connections
		var c = 0
		loop {
			if c >= s:
				break
			var connection = Vector.get(connections, index)
			if connection {
				if connection.sendMessage(message) > 0 {
					sent = true
					break
				}
			}
			if index >= s - 1 {
				index = 0
			}
			else {
				index ++
			}
			c ++
		}
		return sent
	}
}

prop ctx as LoggingContext
prop authenticateConnectionCallback as function<bool, buffer>
prop messageReceivedCallback as function<void, SMSMessage>
var connections as ConnectionManager

ctor:
	connections = new ConnectionManager(this)

func logError(message as string)
{
	assert ctx
	ctx.logError(VALUE "__THIS__" .. ": " .. message)
}

func logWarning(message as string)
{
	assert ctx
	ctx.logWarning(VALUE "__THIS__" .. ": " .. message)
}

func logInfo(message as string)
{
	assert ctx
	ctx.logInfo(VALUE "__THIS__" .. ": " .. message)
}

func logDebug(message as string)
{
	assert ctx
	ctx.logDebug(VALUE "__THIS__" .. ": " .. message)
}

func onDataReceived(data as buffer, connection as SMSConnectionHandler)
{
	assert connection
	assert data:
		connection.close()
	if connection.isNotAuthenticated() {
		onAuthenticateConnection(data, connection)
		return
	}
	onParseData(data, connection)
}

func onParseData(data as buffer, connection as SMSConnectionHandler) private
{
	assert connection
	assert data:
		connection.close()
	var d = assert JSONParser.parse(data) as DynamicMap {
		connection.close()
	}
	onMessageReceived(d)
}

func onMessageReceived(data as DynamicMap)
{
	assert data
	logDebug("New message received: " .. String.asString(data))
	if messageReceivedCallback:
		messageReceivedCallback(SMSMessage.forDataBuffer(String.toUTF8Buffer(JSONEncoder.encode(data))))
}

func onAuthenticateConnection(data as buffer, connection as SMSConnectionHandler)
{
	assert authenticateConnectionCallback {
		logError("No authentication callback set. Closing the connection")
		connection.close()
	}
	assert authenticateConnectionCallback(data) {
		logError("Failed to authenticate connection")
		connection.close()
	}

	// FIXME: Including a userId since the SMS Manager App requires it but doesn't really use it.

	var v = new DynamicMap()
	v.setInteger("type", 2)
	v.setString("userId", "someuserid")
	var m = assert String.toUTF8Buffer(JSONEncoder.encode(v)) {
		logError("Failed to create authentication message")
		connection.close()
	}
	assert connection.sendMessage(m) > 0 {
		logError("Failed to send authentication message")
		connection.close()
	}
	connection.setAuthenticated(true)
	connections.add(connection)
}

func onDisconnect(connection as SMSConnectionHandler):
	connections.remove(connection)

func sendMessage(message as SMSMessage)
{
	assert message
	var messageBuffer = message.toBuffer()
	if connections.sendMessage(messageBuffer) {
		logDebug("Message successfuly sent")
	}
	else {
		logError("Failed to send message to available connections")
	}
}
