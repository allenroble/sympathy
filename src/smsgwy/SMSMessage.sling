
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.random
import jk.json
import jk.time
import jk.md5

class:

const UNKNOWN_TYPE = 0
const DATA_TYPE = 1

func forDataBuffer(data as buffer) static as this
{
	var v = new this().setData(data)
	assert v.initialize()
	return v
}

prop smsId as string
prop recipients as DynamicVector
prop message as string
prop priority as int
var timestamp private as long
var data private as buffer
var dataMap private as DynamicMap
var type private as int

func generateId as string
{
	var sb = new StringBuilder()
	sb.appendInteger(new Random().nextInt())
	sb.appendLong(SystemClock.asSeconds())
	return "SMS-" .. MD5Encoder.encode(sb.toString())
}

func initialize as bool
{
	dataMap = JSONParser.parse(data) as DynamicMap
	assert dataMap
	timestamp = SystemClock.asSeconds()
	smsId = generateId()
	recipients = dataMap.getDynamicVector("recipients")
	message = dataMap.getString("message")
	type = dataMap.getInteger("type")
	priority = dataMap.getInteger("priority")
	return true
}

func setData(data as buffer) as this
{
	this.data = data
	return this
}

func setData(data as DynamicMap) as this
{
	this.data = String.toUTF8Buffer(JSONEncoder.encode(data, false))
	return this
}

func getType as int:
	return type

func toBuffer as buffer
{
	assert dataMap
	dataMap.setString("smsId", smsId)
	dataMap.setObject("recipients", recipients)
	dataMap.setLong("timestamp", timestamp)
	dataMap.setInteger("type", type)
	dataMap.setInteger("priority", priority)
	return String.toUTF8Buffer(JSONEncoder.encode(dataMap))
}
