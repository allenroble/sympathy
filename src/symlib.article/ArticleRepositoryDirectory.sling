
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import capex.util
import capex.text

class is ArticleRepository:

class MyArticle is Article
{
	prop lastModifiedTimeStamp as long

	func mergeToCategories(categories as vector<string>)
	{
		assert categories
		var cc = new vector<string>
		if Vector.isEmpty(categories) == false {
			foreach category in categories:
				cc += category
			foreach category in getCategories():
				cc += category
		}
		setCategories(cc)
	}

	func mergeToTags(tags as vector<string>)
	{
		assert tags
		var cc = new vector<string>
		if Vector.isEmpty(tags) == false {
			foreach tag in tags:
				cc += tag
			foreach tag in getTags():
				cc += tag
		}
		setTags(cc)
	}
}

func forDirectory(ctx as LoggingContext, dir as File) static as this
{
	var v = new this()
	v.setContext(ctx)
	v.setDirectory(dir)
	v.refreshArticles()
	return v
}

prop context as LoggingContext
prop directory as File
var articles as map<string,MyArticle>
var articleLists as map<string,vector<string>>
var staticArticleLists as map<string,vector<string>>
var categoryMap as map<string,Category>
var categoryMapTimestamp = 0L

func refreshArticles
{
	articles = new map<string,MyArticle>
	if directory {
		Log.debug(context, "Refreshing articles: `" .. directory.getPath() .."' ..")
		var it = directory.entries()
		while it {
			var file = it.next()
			if not file:
				break
			if not file.hasExtension("article"):
				continue
			var article = doReadArticleFile(file)
			if not article:
				continue
			var id = article.getId()
			if String.isEmpty(id):
				continue
			articles[id] = article
		}
		Log.debug(context, "DONE refreshing articles.")
	}
	else {
		Log.debug(context, "No directory specified. Cannot refresh articles.")
	}
	updateArticleLists()
}

func sortArticleLists
{
	Log.debug(context, "Sorting article lists ..")
	var it = Map.iterateValues(articleLists) as! Iterator<vector<string>>
	while it {
		var list = it.next()
		if not list:
			break
		Vector.sort(list, func(a as string, b as string) as int {
			var aa = Map.get(articles, a)
			var ab = Map.get(articles, b)
			if not aa && not ab:
				return 0
			if not aa:
				return 1
			if not ab:
				return -1
			var aprio = aa.getPriorityValue()
			var bprio = ab.getPriorityValue()
			if aprio > 0 && aprio > bprio:
				return -1
			if bprio > 0 && bprio > aprio:
				return 1
			var ats = aa.getTimeStampValue()
			var bts = ab.getTimeStampValue()
			if ats < bts:
				return 1
			if ats > bts:
				return -1
			return 0
		})
	}
	Log.debug(context, "Done sorting article lists ..")
}

func updateArticleLists
{
	Log.debug(context, "Updating article lists ..")
	articleLists = new map<string,vector<string>>
	var it = Map.iterateValues(articles) as! Iterator<MyArticle>
	while it {
		var article = it.next()
		if not article:
			break
		var id = article.getId()
		if String.isEmpty(id):
			continue
		foreach category in article.getCategories() {
			var list = Map.get(articleLists, category)
			if not list {
				list = new vector<string>
				articleLists[category] = list
			}
			list += id
		}
	}
	sortArticleLists()
	Log.debug(context, "DONE updating article lists.")
}

func addArticleToCategory(article as string, category as string)
{
	assert article && category
	if not staticArticleLists:
		staticArticleLists = new map<string,vector<string>>
	var list = Map.get(staticArticleLists, category)
	if not list {
		list = new vector<string>
		staticArticleLists[category] = list
	}
	list += article
}

func getCategoryMap as map<string,Category>
{
	if directory {
		var file = directory.entry("categories.json")
		if not file.isFile() {
			categoryMap = null
		}
		else if file.hasChangedSince(categoryMapTimestamp) {
			categoryMap = new map<string,Category>
			categoryMapTimestamp = file.getLastModifiedTimeStamp()
			var data = JSONParser.parse(file.getContentsUTF8()) as DynamicMap
			if data {
				var it = data.iterateKeys()
				while it {
					var id = it.next()
					if id == null:
						break
					var c = Category.forJsonObject(data.getDynamicMap(id))
					c.setId(id)
					categoryMap[id] = c
				}
			}
		}
	}
	return categoryMap
}

func getCategoryById(id as string) as Category
{
	assert id
	var cats = assert getCategoryMap()
	return Map.get(cats, id)
}

func getArticleListForCategory(categoryName as string) as vector<string>
{
	assert categoryName
	var slist = Map.get(staticArticleLists, categoryName)
	if slist:
		return slist
	return Map.get(articleLists, categoryName)
}

func getCategories(callback as function<void,vector<Category>>) override
{
	var map = assert getCategoryMap():
		callback(null)
	var v = new vector<Category>
	var it = Map.iterateValues(map) as! Iterator<Category>
	while it {
		var cat = it.next()
		if not cat:
			break
		v += cat
	}
	callback(v)
}

func getArticleCount(category as string, callback as function<void,int>) override
{
	var names = getArticleListForCategory(category)
	assert names && Vector.getSize(names) >= 0:
		callback(-1)
	callback(Vector.getSize(names))
}

func getArticles(category as string, offset as int, limit as int, callback as function<void,Category,vector<Article>>) override
{
	var v = new vector<Article>
	var names = getArticleListForCategory(category)
	if names {
		for(var n = 0; n<limit; n++) {
			var name = Vector.getAt(names, offset + n)
			if name == null:
				break
			var a = doGetArticleById(name)
			if a == null {
				var ma = new Article()
				ma.setTitle(name)
				a = ma
				var catname = category
				if catname == null:
					catname = "[null]"
				Log.warning(context, "Invalid article id in category `" .. catname .. "': `" .. name .. "'")
			}
			v += a
		}
	}
	var cat = getCategoryById(category)
	if cat == null {
		cat = new Category()
		cat.setId(category)
		cat.setTitle(category)
	}
	callback(cat, v)
}

func doReadArticleFile(file as File) private as MyArticle
{
	assert file
	var reader = assert PrintReader.forReader(file.read()):
		Log.error(context, "Failed to read article file: `" .. file.getPath() .. "'")
	var v = new MyArticle()
	v.setLastModifiedTimeStamp(file.getLastModifiedTimeStamp())
	v.setId(file.getBasenameWithoutExtension())
	Log.debug(context, "Reading article file: `" .. file.getPath() .. "' ..")
	loop {
		var line = reader.readLine()
		if not line:
			break
		line = String.strip(line)
		if String.isEmpty(line):
			break
		if String.startsWith(line, "#"):
			continue
		while String.endsWith(line, "\\") {
			line = String.getSubString(line, 0, String.getLength(line)-1)
			var nl = reader.readLine()
			if not nl:
				break
			nl = String.stripFromStart(nl)
			if String.endsWith(line, " ") == false:
				line = line .. " "
			line = line .. nl
		}
		if String.startsWith(line, "include ") {
			var toinclude = String.getSubString(line, 8)
			if String.isEmpty(toinclude) {
				Log.warning(context, "Empty include directive: `" .. line .. "'")
				continue
			}
			if String.contains(toinclude, "/") || String.contains(toinclude, "\\") {
				Log.warning(context, "Invalid characters in include filename: `" .. toinclude .. "'")
				continue
			}
			var ifile = file.getSibling(toinclude)
			if ifile.isFile() == false {
				Log.warning(context, "Include file does not exist: `" .. toinclude .. "'")
				continue
			}
			var iarticle = doReadArticleFile(ifile)
			if iarticle {
				v.setTitle(iarticle.getTitle())
				v.setSlogan(iarticle.getSlogan())
				v.setAuthor(iarticle.getAuthor())
				v.setIntroMarkup(iarticle.getIntroMarkup())
				v.setDate(iarticle.getDate())
				v.setRedirect(iarticle.getRedirect())
				v.setBanner(iarticle.getBanner())
				v.mergeToCategories(iarticle.getCategories())
				v.setShareImage(iarticle.getShareImage())
				v.setParent(iarticle.getParent())
				v.setShareDescription(iarticle.getShareDescription())
				v.setTimeStamp(iarticle.getTimeStamp())
				v.setPriority(iarticle.getPriority())
				v.setDescription(iarticle.getDescription())
				v.setIntroPhoto(iarticle.getIntroPhoto())
				v.setFbImage(iarticle.getFbImage())
				v.mergeToTags(iarticle.getTags())
			}
			continue
		}
		if String.indexOf(line, ':') > 0 {
			var comps = String.split(line, ':', 2)
			var key = String.strip(Vector.get(comps, 0))
			var value = String.strip(Vector.get(comps, 1))
			if ArticleUtil.isValidIdentifier(key) {
				if key == "title" {
					v.setTitle(value)
				}
				else if key == "slogan" {
					v.setSlogan(value)
				}
				else if key == "author" {
					v.setAuthor(value)
				}
				else if key == "intro" {
					v.setIntroMarkup(value)
				}
				else if key == "date" {
					v.setDate(value)
				}
				else if key == "redirect" {
					v.setRedirect(value)
				}
				else if key == "banner" {
					v.setBanner(value)
				}
				else if key == "shareImage" {
					v.setShareImage(value)
				}
				else if key == "shareDescription" {
					v.setShareDescription(value)
				}
				else if key == "parent" {
					v.setParent(value)
				}
				else if key == "timeStamp" {
					var tsv = String.toLong(value)
					if tsv < 10000:
						Log.warning(context, "Invalid timestamp value: `" .. value .. "'")
					v.setTimeStampValue(tsv)
				}
				else if key == "priority" {
					v.setPriorityValue(String.toInteger(value))
				}
				else if key == "description" {
					v.setDescription(value)
				}
				else if key == "introPhoto" {
					v.setIntroPhoto(value)
				}
				else if key == "fbImage" {
					v.setFbImage(value)
				}
				else if key == "categories" {
					var vc = new vector<string>
					var cats = String.split(value, ' ')
					foreach cat in cats {
						var cc = String.strip(cat)
						if String.isNotEmpty(cc):
							vc += cc
					}
					v.setCategories(vc)
				}
				else if key == "tags" {
					var vc = new vector<string>
					var cats = String.split(value, ' ')
					foreach cat in cats {
						var cc = String.strip(cat)
						if String.isNotEmpty(cc):
							vc += cc
					}
					v.setTags(vc)
				}
				else {
					Log.warning(context, "Unsupported header value in file `" .. file.getPath() .. "': `" .. key .. "'")
				}
			}
		}
		else {
			Log.warning(context, "Invalid header line in file `" .. file.getPath() .. "': `" .. line .. "'")
		}
	}
	var sb = new StringBuilder()
	loop {
		var line = reader.readLine()
		if not line:
			break
		if sb.count() > 0:
			sb.append('\n')
		sb.append(line)
	}
	v.setContentMarkup(sb.toString())
	Log.debug(context, "DONE reading article file: `" .. file.getPath() .. "'.")
	reader.close()
	return v
}

func doGetArticleById(id as string) as Article
{
	assert id && articles
	var v = Map.get(articles, id)
	if directory {
		var file = directory.entry(id .. ".article")
		if file.isFile() {
			if v == null || file.hasChangedSince(v.getLastModifiedTimeStamp()) {
				var nv = doReadArticleFile(file)
				if nv {
					v = nv
					Map.set(articles, id, v)
					updateArticleLists()
				}
			}
		}
		else if v {
			Map.remove(articles, id)
			updateArticleLists()
			v = null
		}
	}
	return v
}

func getArticleById(id as string, callback as function<void,Article>) override:
	callback(doGetArticleById(id))

func getArticleTitleSync(id as string) override as string
{
	var article = doGetArticleById(id)
	if article:
		return article.getTitle()
	return null
}

func getCategoryTitleSync(id as string) override as string
{
	var category = getCategoryById(id)
	if category:
		return category.getTitle()
	return null
}

func getArticleAttachment(id as string, name as string, callback as function<void,string,buffer>) override
{
	assert id && name && directory:
		callback(null, null)
	var f = directory.entry(id).entry(name)
	assert f.isFile():
		callback(null, null)
	// FIXME: Handle ETags
	callback(MimeTypeRegistry.typeForFile(f), f.getContentsBuffer())
}
