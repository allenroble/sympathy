
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.http.server
import jk.template
import jk.time.format

class is HTTPServerRequestHandlerAdapter is RichTextDocumentReferenceResolver:

func forRepository(repository as ArticleRepository) static as this
{
	var v = new this()
	v.setRepository(repository)
	return v
}

prop repository as ArticleRepository
prop articlesPerPage = 10
prop templateStorage as TemplateStorage
prop templateData as DynamicMap
prop templatePrefix as string
prop languages as vector<string>
prop enableCategoryList = false
prop categoryPathSuffix as string
prop defaultCategory as string

func getReferenceHref(refid as string) as string
{
	var urlPrefix as string
	if templateData:
		urlPrefix = templateData.getString("urlPrefix")
	if urlPrefix == null:
		return "/" .. refid
	return urlPrefix .. "/" .. refid
}

func getReferenceTitle(refid as string) as string
{
	if repository {
		var v = repository.getArticleTitleSync(refid)
		if v:
			return v
		var catId = refid
		if categoryPathSuffix {
			if String.endsWith(catId, categoryPathSuffix) {
				catId = String.getSubString(catId, 0, String.getLength(catId) - String.getLength(categoryPathSuffix))
			}
			else {
				catId = null
			}
		}
		if catId {
			var v = repository.getCategoryTitleSync(catId)
			if v:
				return v
		}
	}
	return refid
}

func getContentString(cid as string) as string
{
	var tsf = assert templateStorage as TemplateStorageUsingFiles:
		Log.error(logContext, "Only implemented for TemplateStorageUsingFiles")
	var dir = assert tsf.getDirectory()
	var file = dir.entry("content").entry(cid .. ".html")
	assert file.isFile()
	return file.getContentsUTF8()
}

func isResponseHTML(req as HTTPServerRequest) as bool
{
	assert templateStorage
	assert req.getQueryParameter("format") != "json"
	return true
}

func onGETCategoryList(req as HTTPServerRequest, next as function)
{
	repository.getCategories(func(results as vector<Category>) {
		assert results:
			sendResponse(req, "error", HTTPServerJSONResponse.forErrorCode("queryFailed"))
		var v = new vector
		foreach result in results:
			v += result.toJsonObject()
		var data = new DynamicMap()
		data.setObject("categories", v)
		sendResponse(req, "categorylist", data)
	})
}

func processTimeStamp(values as DynamicMap)
{
	var timeStamp = values.getLongInteger("timeStamp")
	if timeStamp > 0 {
		var date = VerboseDateTimeString.getDateStringForDateTime(DateTime.forSeconds(timeStamp))
		var time = VerboseDateTimeString.getTimeStringForDateTime(DateTime.forSeconds(timeStamp))
		values.setString("date", date)
		values.setString("time", time)
		values.setString("dateTime", date .. " " .. time)
	}
}

func onGETCategoryArticles(req as HTTPServerRequest, next as function)
{
	var catId = req.peekResource()
	if catId && categoryPathSuffix {
		assert String.endsWith(catId, categoryPathSuffix):
			next()
		catId = String.getSubString(catId, 0, String.getLength(catId) - String.getLength(categoryPathSuffix))
	}
	var pp = 0
	var spage = req.getQueryParameter("page")
	if spage:
		pp = String.toInteger(spage) - 1
	if pp < 0:
		pp = 0
	var myObject = this
	if String.isEmpty(catId) && defaultCategory:
		catId = defaultCategory
	repository.getArticleCount(catId, func(count as int) {
		assert count >= 0:
			next()
		req.popResource()
		if req.hasMoreResources() {
			req.unpopResource()
			next()
			return
		}
		if req.isForDirectory() == false {
			req.sendRedirectAsDirectory()
			return
		}
		var pages = count /  articlesPerPage
		if count % articlesPerPage > 0:
			pages ++
		if pages < 1:
			pages = 1
		repository.getArticles(catId, pp * articlesPerPage, articlesPerPage, func(category as Category, results as vector<Article>) {
			assert results:
				sendResponse(req, "error", HTTPServerJSONResponse.forErrorCode("queryFailed"))
			var v = new vector
			var resultCount = Vector.getSize(results)
			var doSendResponse = func {
				var data = new DynamicMap()
				var cat = category
				if cat == null {
					cat = new Category()
					cat.setId(catId)
					cat.setTitle(catId)
				}
				var intro = cat.getIntro()
				if intro == null:
					intro = ""
				data.setString("intro", intro)
				data.setString("description", intro)
				data.setObject("articles", v)
				data.setObject("category", cat.toJsonObject())
				if pp > 0:
					data.setInteger("previousPage", pp)
				if pp+2 <= pages:
					data.setInteger("nextPage", pp+2)
				data.setInteger("currentPage", pp+1)
				data.setInteger("pageCount", pages)
				sendResponse(req, "articlelist", data)
			}
			if resultCount < 1 {
				doSendResponse()
				return
			}
			var resultCounter = 0
			var onIntroHtmlRetrieved = func {
				resultCounter ++
				if resultCounter == resultCount:
					doSendResponse()
			}
			foreach result in results {
				var map = result.toJsonObject() as DynamicMap
				if not map:
					map = new DynamicMap()
				processTimeStamp(map)
				v += map
				var html = repository.getIntroHtml(result, myObject)
				map.setString("introHtml", html)
				onIntroHtmlRetrieved()
			}
		})
	})
}

func getBreadcrumbs(article as Article) as vector
{
	assert article
	var parent = article.getParent()
	assert String.isNotEmpty(parent)
	var v = new vector
	var o = new DynamicMap()
	o.setObject("reference", parent)
	o.setString("text", repository.getArticleTitleSync(parent))
	v += o
	return v
}

func onGETArticle(req as HTTPServerRequest, next as function)
{
	var pageId = req.peekResource()
	assert String.isNotEmpty(pageId):
		next()
	var myObject = this
	repository.getArticleById(pageId, func(article as Article) {
		assert article:
			next()
		req.popResource()
		if req.hasMoreResources() {
			var attachmentFileName = req.popResource()
			if req.isForDirectory() || req.hasMoreResources() {
				req.unpopResource()
				req.unpopResource()
				next()
				return
			}
			repository.getArticleAttachment(article.getId(), attachmentFileName, func(mimeType as string, data as buffer) {
				if data == null {
					req.unpopResource()
					req.unpopResource()
					next()
					return
				}
				var resp = HTTPServerResponse.forBuffer(data, mimeType)
				req.sendResponse(resp)
			})
			return
		}
		var redirect = article.getRedirect()
		if String.isNotEmpty(redirect) {
			req.sendRedirect(redirect)
			return
		}
		if req.isForDirectory() == false {
			req.sendRedirectAsDirectory()
			return
		}
		var map = article.toJsonObject() as DynamicMap
		if not map:
			map = new DynamicMap()
		if String.isEmpty(map.getString("shareDescription")):
			map.setString("shareDescription", map.getString("slogan"))
		var introHtml = repository.getIntroHtml(article, myObject)
		map.setString("introHtml", introHtml)
		var contentHtml = repository.getContentHtml(article, myObject)
		map.setString("contentHtml", contentHtml)
		map.setObject("breadcrumbs", getBreadcrumbs(article))
		processTimeStamp(map)
		sendResponse(req, "article", map)
	})
}

func sendResponse(req as HTTPServerRequest, type as string, content as object)
{
	var rdata = new DynamicMap()
	rdata.setString("type", type)
	rdata.setObject("content", content)
	var rq = new DynamicMap()
	rq.setString("path", req.getURLPath())
	rdata.setObject("request", rq)
	if templateData:
		rdata.mergeFrom(templateData)
	if isResponseHTML(req) {
		var tp = templatePrefix
		if tp == null:
			tp = ""
		var templateName = tp .. type
		templateStorage.getTemplate(templateName, func(template as string) {
			assert template:
				req.sendJSONObject(rdata)
			sendHTMLResponse(req, rdata, template)
		})
	}
	else {
		rdata.remove("site")
		rdata.remove("request")
		req.sendJSONObject(rdata)
	}
}

func sendHTMLResponse(req as HTTPServerRequest, data as DynamicMap, tt as string)
{
	var includeDirs = new vector<File>
	var tsf = templateStorage as TemplateStorageUsingFiles
	if tsf:
		includeDirs += tsf.getDirectory()
	var template = assert TextTemplate.forHTMLString(tt, includeDirs):
		req.sendInternalError("Text template parsing")
	template.setLanguagePreferences(languages)
	var str = assert template.execute(data, includeDirs):
		req.sendInternalError("Text template execution")
	req.sendHTMLString(str)
}

func onGET(req as HTTPServerRequest, next as function) override
{
	assert repository:
		next()
	if req.hasMoreResources() == false {
		if req.isForDirectory() == false {
			req.sendRedirectAsDirectory()
			return
		}
		onGETCategoryArticles(req, next)
		return
	}
	var resource = req.peekResource()
	if resource == "articles" {
		var path = String.getEndOfString(req.getURLPath(), 9)
		if String.isEmpty(path):
			path = "/"
		req.sendRedirect(path)
		return
	}
	if enableCategoryList && resource == "categories" {
		req.popResource()
		if req.hasMoreResources() {
			next()
			return
		}
		if req.isForDirectory() == false {
			req.sendRedirectAsDirectory()
			return
		}
		onGETCategoryList(req, next)
		return
	}
	if ArticleUtil.isValidIdentifier(resource) == false {
		next()
		return
	}
	onGETArticle(req, func {
		onGETCategoryArticles(req, next)
	})
}
