
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.json
import jk.web.json

class:

var client static private as JSONAPIClient

func getClient static private as JSONAPIClient
{
	if not client {
		client = new JSONAPIClient()
		client.setApiUrl("https://graph.facebook.com/")
		client.setRedirectionEnabled(true)
	}
	return client
}

func getUserProfile(fbUserId as string, fbAccessToken as string, callback as function<void,DynamicMap,Error>) static:
	getUserProfile(fbUserId, fbAccessToken, null, callback)

func getUserProfile(fbUserId as string, fbAccessToken as string, fields as DynamicVector, callback as function<void,DynamicMap,Error>) static
{
	var f as string
	if fields && fields.getSize() > 0 {
		var sb = new StringBuilder()
		var first = true
		foreach field in fields.toVectorOfStrings() {
			var v = String.strip(field)
			if String.isEmpty(v):
				continue
			if not first:
				sb.appendCharacter(',')
			first = false
			sb.appendString(v)
		}
		f = sb.toString()
	}
	if String.isEmpty(f):
		f = "id,address,about,birthday,email,gender,education,first_name,last_name"
	var client = getClient()
	client.doSendRequest("GET", client.getFullURL(fbUserId .. "?fields=" .. f .. "&access_token=" .. fbAccessToken), null, null, func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		var json = assert JSONParser.parse(DataValidator.toValidJSONString(replaceUnicodeChars(String.forUTF8Buffer(body)))) as DynamicMap:
			callback(null, Error.forCode("invalidResponse"))
		var error = json.getDynamicMap("error")
		assert not error {
			var e = Error.forMessage(error.getString("message"))
			e.setCode(error.getString("code"))
			e.setDetail(error.getString("fbtrace_id"))
			callback(null, e)
		}
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func getUserPhoto(fbUserId as string, width as int, height as int, callback as function<void, KeyValueList<string,string>, buffer, Error>) static
{
	assert String.isNotEmpty(fbUserId):
		callback(null, null, Error.instance("no_fb_id", "No FB id"))
	var w = width
	if w < 100:
		w = 100
	var h = height
	if h < 100:
		h = 100
	var client = getClient()
	client.doGetFile(fbUserId .. "/picture?height=" .. String.forInteger(h) .. "&width=" .. String.forInteger(w), func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body && Buffer.getSize(body) > 0:
			callback(null, null, Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		callback(responseHeaders, body, null)
	}, func(error as Error) {
		callback(null, null, error)
	})
}

func replaceUnicodeChars(response as string) static as string
{
	var str = response
	if String.contains(response, "\\u0040"):
		str = String.replaceString(response, "\\u0040", "@")
	if String.contains(response, "\\u00f1"):
		str = String.replaceString(str, "\\u00f1", "Ã±")
	return str
}
