
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.json
import jk.http.client

class:

class MyHTTPClientListener is HTTPClientListener
{
	prop listener as function<void, buffer, Error>
	var body as buffer

	func onError(message as string) override
	{
		if listener:
			listener(null, Error.forMessage(message))
	}

	func onAborted override
	{
		if listener:
			listener(null, Error.forCode("aborted"))
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return true
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if listener {
			if not body {
				listener(null, Error.forMessage("No data received from AccuWeather"))
				return
			}
			listener(body, null)
		}
	}
}

prop apiKey as string
prop locationHost = "http://dataservice.accuweather.com/locations/"
prop currentConditionHost = "http://dataservice.accuweather.com/currentconditions/"
prop forecastHost = "http://dataservice.accuweather.com/forecasts/"
prop version = "v1"
prop details = true
prop metric = true

func forApiKey(key as string) static as this
{
	if String.isEmpty(key):
		return null
	return new this().setApiKey(key)
}

func queryLocation(latitude as double, longitude as double, alistener as function<void, DynamicMap, Error>)
{
	var listener final = alistener
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(locationHost .. version .. "/cities/geoposition/search.json?q=" .. String.forDouble(latitude) .. "," .. String.forDouble(longitude) .. "&apikey=" .. apiKey)
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicMap
		if not data {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(data, null)
	}))
	op.closeConnection(null)
}

func queryCurrentCondition(key as string, alistener as function<void, DynamicMap, Error>)
{
	var listener final = alistener
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(currentConditionHost .. version .."/" .. key .. "?apikey=" .. apiKey .. "&details=" .. String.forBoolean(details))
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicVector
		if not data {
			listener(null, Error.forMessage("Invalid data from AccuWeather"))
			return
		}
		var currentCondition = data.get(0) as DynamicMap
		if not currentCondition {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(currentCondition, null)
	}))
	op.closeConnection(null)
}

func queryForecast(key as string, forecastDays as int, alistener as function<void, DynamicMap, Error>)
{
	var listener final = alistener
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(forecastHost .. version .."/daily/".. String.forInteger(forecastDays) .."day/" .. key .. "?apikey=" .. apiKey .. "&metric=" .. String.forBoolean(metric))
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicMap
		if not data {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(data, null)
	}))
	op.closeConnection(null)
}
