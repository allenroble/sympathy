
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import capex.crypto
import capex.web

func forConfig(data as DynamicMap) static as this
{
	var v = new this()
	v.setConfig(data)
	return v
}

prop config as DynamicMap
var jwt as JWT
var token as string

func initialize(permissions as array<string>) as bool
{
	assert config
	assert permissions
	var ts = SystemClock.asUTCSeconds()
	jwt = new JWT()
	jwt.setIssuer(config.getString("client_email"))
	jwt.setIssuedAt(ts)
	jwt.setAudience("https://www.googleapis.com/oauth2/v4/token")
	jwt.setExpirationTime(ts + 3600)
	var first = true
	var sb = new StringBuilder()
	foreach perms in permissions {
		if not first:
			sb.append(" ")
		sb.append(perms)
		first = false
	}
	jwt.setClaim("scope", sb.toString())
	token = jwt.generateTokenWithRS256(config.getString("private_key"))
	if String.isEmpty(token):
		return false
	return true
}

func getJwtAccessToken as string
{
	assert jwt
	if String.isNotEmpty(token) && jwt.isActive():
		return token
	token = jwt.generateTokenWithRS256(config.getString("private_key"))
	return token
}
