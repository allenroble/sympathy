
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import capex.web

func forServiceAccount(data as DynamicMap) static as this
{
	var v = new this()
	v.setConfig(data)
	return v
}

prop config as DynamicMap
var credential as ServiceAccountCredential

func getCredential(permissions as array<string>) private as ServiceAccountCredential
{
	if not credential:
		credential = ServiceAccountCredential.forConfig(config)
	if not credential.initialize(permissions):
		return null
	return credential
}

func requestAccessToken(permissions as array<string>, callback as function<void, GoogleToken, Error>)
{
	assert callback
	assert permissions:
		callback(null, Error.instance("noPermissions", "No permissions supplied"))
	var googleCredential = assert getCredential(permissions):
		callback(null, Error.instance("noCredential", "No account credential"))
	var headers = new KeyValueList<string, string>()
	headers.add("Content-Type", "application/x-www-form-urlencoded")
	var sb = new StringBuilder()
	sb.append("assertion=")
	sb.append(googleCredential.getJwtAccessToken())
	sb.append("&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer")
	var client = new JSONAPIClient()
	client.setApiUrl("https://www.googleapis.com/")
	client.doSendRequest("POST", client.getFullURL("/oauth2/v4/token"), headers, String.toUTF8Buffer(sb.toString()), func(responseHeaders as KeyValueList<string, string>, body as buffer) {
		assert body && Buffer.getSize(body) > 0:
			callback(null, Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		var responseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			callback(null, Error.forCode("invalidServerResponse"))
		var token = new GoogleToken()
		token.setToken(responseBody.getString("access_token"))
		token.setType(responseBody.getString("token_type"))
		token.setExpiry(Integer.asObject(responseBody.getInteger("expiry")))
		callback(token, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}
