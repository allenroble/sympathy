
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.json
import jk.web.json

class:

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

var instance static as this
var client private as JSONAPIClient

func getClient private as JSONAPIClient
{
	if not client {
		client = new JSONAPIClient()
		client.setApiUrl("https://www.googleapis.com/")
	}
	return client
}

func listObjects(accessToken as string, bucketName as string, callback as function<void, DynamicVector, Error>)
{
	assert callback
	assert String.isNotEmpty(bucketName):
		callback(null, Error.instance("noBucketName", "No google bucket name"))
	var client = assert getClient():
		callback(null, Error.instance("noClient", "No native client"))
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	client.doSendRequest("GET", client.getFullURL("/storage/v1/b/" .. bucketName .. "/o?projection=full"), headers, null, func(responseHeaders as KeyValueList<string, string>, body as buffer) {
		var bb = String.forUTF8Buffer(body)
		assert body && Buffer.getSize(body) > 0:
			callback(null, Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		var responseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			callback(null, Error.forCode("invalidServerResponse"))
		var items = assert responseBody.getDynamicVector("items"):
			callback(null, Error.forCode("noItems"))
		callback(items, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func uploadObject(accessToken as string, bucketObject as GoogleCloudBucketObject, callback as function<void, DynamicMap, Error>)
{
	assert callback
	assert bucketObject:
		callback(null, Error.instance("noBucketObject", "No google bucket object"))
	var client = assert getClient():
		callback(null, Error.instance("noClient", "No native client"))
	var headers = new KeyValueList<string, string>()
	headers.add("Content-Length", String.forInteger(Buffer.getSize(bucketObject.getBlobData())))
	headers.add("Content-Type", bucketObject.getMimeType())
	headers.add("Authorization", "Bearer " .. accessToken)
	client.doSendRequest("POST", client.getFullURL("/upload/storage/v1/b/" .. bucketObject.getBucketName() .. "/o?uploadType=media&name=" .. bucketObject.getFileName()), headers, bucketObject.getBlobData(), func(responseHeaders as KeyValueList<string, string>, body as buffer) {
		var bb = String.forUTF8Buffer(body)
		assert body && Buffer.getSize(body) > 0:
			callback(null, Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		var responseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			callback(null, Error.forCode("invalidServerResponse"))
		callback(responseBody, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func copyObject(accessToken as string, sourceObject as GoogleCloudBucketObject, destObject as GoogleCloudBucketObject, callback as function<void, Error>)
{
	assert callback
	assert sourceObject:
		callback(Error.instance("noSourceBucketObject", "No source Google Bucket object"))
	assert destObject:
		callback(Error.instance("noDestBucketObject", "No destination Google Bucket object"))
	var client = assert getClient():
		callback(Error.instance("noClient", "No native client"))
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	client.doSendRequest("POST", client.getFullURL("/storage/v1/b/" .. sourceObject.getBucketName() .. "/o/" .. sourceObject.getFileName() .. "/copyTo/b/" .. destObject.getBucketName() .. "/o/" .. destObject.getFileName()), headers, sourceObject.getBlobData(), func(responseHeaders as KeyValueList<string, string>, body as buffer) {
		assert body && Buffer.getSize(body) > 0:
			callback(Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		var responseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			callback(Error.forCode("invalidServerResponse"))
		callback(null)
	}, func(error as Error) {
		callback(error)
	}, 0)
}

func deleteObject(accessToken as string, sourceObject as GoogleCloudBucketObject, callback as function<void, Error>)
{
	assert callback
	assert sourceObject:
		callback(Error.instance("noBucketObject", "No google bucket object"))
	var client = assert getClient():
		callback(Error.instance("noClient", "No native client"))
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	client.doSendRequest("DELETE", client.getFullURL("/storage/v1/b/" .. sourceObject.getBucketName() .. "/o/" .. sourceObject.getFileName()), headers, sourceObject.getBlobData(), func(responseHeaders as KeyValueList<string, string>, body as buffer) {
		assert body && Buffer.getSize(body) > 0:
			callback(Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."))
		var responseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			callback(Error.forCode("invalidServerResponse"))
		callback(null)
	}, func(error as Error) {
		callback(error)
	}, 0)
}
