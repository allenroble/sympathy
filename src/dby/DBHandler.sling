
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.sql
import jk.http.server

class is HTTPServerRequestHandlerAdapter:

prop db as SQLDatabase

func onPOST(req as HTTPServerRequest) override as bool
{
	var tableName = req.popResource()
	if tableName == null {
		req.sendInternalError("Creating tables: Not implemented")
		return true
	}
	if req.hasMoreResources() {
		req.sendInvalidRequest()
		return true
	}
	var data = req.getBodyJSONMap()
	if data == null {
		req.sendInvalidRequest()
		return true
	}
	db.execute(db.prepareInsertStatement(tableName, data), func(status as bool) {
		if status == false {
			req.sendInternalError()
		}
		else {
			req.sendJSONObject(HTTPServerJSONResponse.forOk())
		}
	})
	return true
}

func onGET(req as HTTPServerRequest) override as bool
{
	var tableName = req.popResource()
	if tableName == null {
		db.queryAllTableNames(func(data as vector) {
			if data == null {
				req.sendNotFound()
			}
			else {
				req.sendJSONObject(data)
			}
		})
		return true
	}
	if req.hasMoreResources() {
		req.sendInvalidRequest()
		return true
	}
	db.query(db.prepareQueryAllStatement(tableName), func(data as SQLResultSetIterator) {
		if data == null {
			req.sendNotFound()
		}
		else {
			req.sendJSONString(data.toVectorListJSON())
		}
	})
	return true
}
