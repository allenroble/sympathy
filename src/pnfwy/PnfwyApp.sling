
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.server.web
import jk.http.server
import symlib.webapi

class is WebServer:

var fcmServerKey as string

main:
	return new this().executeMain(args)

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "fcmServerKey" {
		fcmServerKey = value
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert String.isNotEmpty(fcmServerKey):
		Log.error(ctx, "Please specify FCM server key with the parameter key: 'fcmServerKey'.")
	server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
		if req.isPOST() {
			var body = assert req.getBodyJSONMap():
				req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
			var registrationIds = body.getDynamicVector("registrationIds")
			if not registrationIds || registrationIds.getSize() < 1 {
				var registrationId = body.getString("registrationId")
				assert String.isNotEmpty(registrationId):
					req.sendJSONObject(HTTPServerJSONResponse.forError(Error.instance("noRegistrationId", "No registration id(s) specified.")))
				registrationIds = new DynamicVector()
				registrationIds.appendObject(registrationId)
			}
			var notification = body.getDynamicMap("notification")
			var data = body.getDynamicMap("data")
			assert notification || data:
				req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
			FirebaseCloudMessaging.send(fcmServerKey, registrationIds, notification, data, func(r as DynamicMap, e as Error) {
				assert not e:
					req.sendJSONObject(HTTPServerJSONResponse.forError(e))
				req.sendJSONObject(HTTPServerJSONResponse.forOk())
			})
			return
		}
		next()
	})
	return true
}
