
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class is WebServer:

import cape
import capex.console
import sympathy
import sympathy.app

var contentDirectory as File
var listDirectories = true
var processTemplateFiles = false

func printHeader(stdout as PrintWriter) override:
	ConsoleApplicationUtil.printHeader(Stdout.instance(), VALUE "sling_project_title", VALUE "sling_project_version", VALUE "sling_project_copyright", VALUE "sling_project_license", VALUE "target_platform")

func printVersion(stdout as PrintWriter, longFormat as bool) override:
	ConsoleApplicationUtil.printVersion(Stdout.instance(), VALUE "sling_project_version", VALUE "sling_project_title")

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if base.configure(key, value, relativeTo, error):
		return true
	if key == "contentDirectory" {
		contentDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "listDirectories" {
		listDirectories = Boolean.asBoolean(value)
		return true
	}
	if key == "processTemplateFiles" {
		processTemplateFiles = Boolean.asBoolean(value)
		return true
	}
	return false
}

func acceptCommandLineArgument(arg as CommandLineArgument) override as bool
{
	if base.acceptCommandLineArgument(arg):
		return true
	if arg.isParameter() {
		contentDirectory = File.forPath(arg.parameter)
		return true
	}
	return false
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	HTTPServerBase.UPDATE_SERVER_NAME(server, VALUE "sling_project_title", VALUE "sling_project_version")
	assert contentDirectory:
		Log.error(ctx, "No `contentDirectory' specified. Either use a config file or specify -OcontentDirectory=<directory>")
	assert contentDirectory.isDirectory():
		Log.error(ctx, "Not a directory: `" .. contentDirectory.getPath() .. "'")
	var files = HTTPServerDirectoryHandler.forDirectory(contentDirectory)
	files.setListDirectories(listDirectories)
	files.setProcessTemplateFiles(processTemplateFiles)
	if processTemplateFiles {
		files.setIndexFiles([
			"index.html",
			"index.html.t"
		])
	}
	else {
		files.setIndexFiles([
			"index.html"
		])
	}
	files.setServerURL(VALUE "sling_project_url")
	files.setServerName(VALUE "sling_project_title" .. "/" .. VALUE "sling_project_version")
	server.pushRequestHandler(files)
	return true
}

main
{
	if new this().execute(args) == false:
		return 1
	return 0
}
