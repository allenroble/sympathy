
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.log
import jk.ws.client
import jk.json

class:

prop ctx as LoggingContext
prop onOpenCallback as function<void>
prop onMessageCallback as function<void, ChatMessage>
prop onErrorCallback as function<void>
prop onCloseCallback as function<void>
var socket private as WSSocket
var senderId private as string

func logError(message as string) private
{
	assert ctx
	ctx.logError("ChatEngine: " .. message)
}

func logWarning(message as string) private
{
	assert ctx
	ctx.logWarning("ChatEngine: " .. message)
}

func logInfo(message as string) private
{
	assert ctx
	ctx.logInfo("ChatEngine: " .. message)
}

func logDebug(message as string) private
{
	assert ctx
	ctx.logDebug("ChatEngine: " .. message)
}

func connect(url as string, data as buffer)
{
	var authData final = data
	assert authData {
		logError("No 'authData' specified.")
		assert onErrorCallback:
			logWarning("No 'onErrorCallback' configured. Ignoring error event.")
		onErrorCallback()
	}
	socket = WSSocket.create()
	assert socket:
		logError("Failed to create WSSocket instance!")
	socket.setOnOpenCallback(func {
		socket.send(WSMessage.forData(authData))
		// FIXME: We should send an authentication data by this time
		// before calling the onOpenCallback() method.
	})
	socket.setOnMessageCallback(func(message as WSMessage) {
		onWSMessageReceived(message)
	})
	socket.setOnErrorCallback(func {
		assert onErrorCallback:
			logWarning("No 'onErrorCallback' configured. Ignoring error event.")
		onErrorCallback()
	})
	socket.setOnCloseCallback(func(e as WSCloseEvent) {
		assert onCloseCallback:
			logWarning("No 'onCloseCallback' configured. Ignoring close event.")
		onCloseCallback()
	})
	socket.connect(url)
}

func onWSMessageReceived(message as WSMessage) private
{
	assert message
	assert onMessageCallback:
		logWarning("No 'onMessageCallback' configured. Ignoring message received.")
	var v = JSONParser.parse(message.getData()) as DynamicMap
	assert v {
		logWarning("Invalid message received from server. Closing the connection.")
		close()
	}
	var type = v.getInteger("type")
	switch type {
		case 2 {
			onCommandMessageReceived(v)
			break
		}
		case 1 {
			onDataMessageReceived(v)
			break
		}
		default {
			close()
		}
	}
}

func onCommandMessageReceived(data as DynamicMap) private
{
	assert data
	var command = data.getInteger("command")
	switch command {
		case 1 {
			assert onOpenCallback:
				logWarning("No 'onOpenCallback' configured. Ignoring open event.")
			senderId = data.getString("userId")
			assert senderId {
				logWarning("No 'userId' included in the open command. Closing the connection.")
				close()
			}
			onOpenCallback()
			break
		}
		default {
			close()
		}
	}
}

func onDataMessageReceived(data as DynamicMap) private
{
	var v = new ChatMessage()
	v.setChannelId(data.getString("channelId"))
	v.setSenderId(data.getString("senderId"))
	v.setTimestamp(data.getInteger("timestamp"))
	v.setMessage(data.getString("message"))
	v.setRecipients(data.getDynamicVector("recipients"))
	onMessageCallback(v)
}

func close
{
	assert socket:
		logError("No active connection to close!")
	socket.close(1000, "Sample reason for closing")
}

func sendMessage(message as ChatMessage)
{
	assert socket:
		logError("No active connection to send to!")
	assert message
	message.setSenderId(senderId)
	socket.send(WSMessage.forStringData(message.toDynamicMapString()))
}
