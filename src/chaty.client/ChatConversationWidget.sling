
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.ui
import jk.widget
import jk.widget.common
import jk.widget.file
import jk.log

class is LayerWidget is KeyListener abstract:

ctor(context as GuiApplicationContext)
{
	base(context)
	messages = new DynamicVector()
}

prop chatWidget as ChatWidget
prop channelId as string
var fileName as string
var recipients private as DynamicVector
var fileAttachment as VerticalBoxWidget
var messageList private as VerticalBoxWidget
var messageField private as TextAreaWidget
var messages private as DynamicVector

func initialize(item as ChatConversationItemWidget) as bool
{
	assert item
	messages = item.getMessages()
	if not messages:
		messages = new DynamicVector()
	channelId = item.getChannelId()
	if String.isEmpty(channelId):
		return false
	recipients = item.getRecipients()
	assert recipients
	return true
}

func onMessageReceived(message as ChatMessage)
{
	assert message {
		Log.error(context, "message from server is null")
	}
	if not String.isEmpty(channelId) && String.equals(channelId, message.getChannelId()) == false:
		return
	channelId = message.getChannelId()
	if String.isEmpty(channelId):
		return
	recipients = message.getRecipients()
	initializeMessageWidget(message)
}

func initializeMessageWidget(message as ChatMessage)
{
	assert (message && messageList)
	var mwo = assert createMessageWidgetObject()
	mwo.setMessage(message)
	messageList.addWidget(mwo)
}

func initializeWidget override
{
	base.initializeWidget()
	var bg = createBackgroundWidget()
	if bg:
		addWidget(bg)
	var vbox = VerticalBoxWidget.forContext(context)
	var header = createHeaderWidget()
	if header:
		vbox.addWidget(header)
	var subHeader = createSubHeaderWidget()
	if subHeader:
		vbox.addWidget(subHeader)
	vbox.addWidget(VerticalScrollerWidget.forWidget(context, messageList = VerticalBoxWidget.forContext(context)), 1.0)
	vbox.addWidget(fileAttachment = VerticalBoxWidget.forContext(context))
	var footer = createFooterWidget()
	if footer:
		vbox.addWidget(footer)
	addWidget(vbox)
	foreach message as ChatMessage in messages.toVector():
		initializeMessageWidget(message)
}

func createHeaderWidget private as Widget
{
	var hbox = HorizontalBoxWidget.forContext(context)
	var back = createBackButtonWidget()
	var title = createTitleWidget()
	if not back && not title:
		return null
	if back {
		Widget.setWidgetClickHandler(back, func {
			onBackWidgetClicked()
		})
		hbox.addWidget(back)
	}
	if title:
		hbox.addWidget(title, 1)
	var hbw = createHeaderBackgroundWidget()
	if hbw {
		var layer = LayerWidget.forContext(context)
		layer.addWidget(hbw)
		layer.addWidget(hbox)
		return layer
	}
	return hbox
}

func onKeyEvent(event as KeyEvent) virtual
{
	if event.isKeyPress(KeyEvent.KEY_BACK) {
		event.consume()
		onBackWidgetClicked()
	}
}

func onBackWidgetClicked private
{
	assert chatWidget
	chatWidget.onBackFromConversationWidget()
}

func onSendWidgetClicked private
{
	assert chatWidget
	assert messageField
	var text = assert messageField.getWidgetText()
	messageField.setWidgetText(null)
	var m = new ChatMessage()
	m.setRecipients(recipients)
	if not String.isEmpty(channelId):
		m.setChannelId(getChannelId())
	m.setMessage(text)
	if not String.isEmpty(text):
		chatWidget.sendMessage(m)
}

func createHeaderBackgroundWidget virtual as Widget:
	return null

func createFooterBackgroundWidget virtual as Widget:
	return null

func createBackgroundWidget virtual as Widget:
	return null

func createBackButtonWidget virtual as Widget:
	return null

func createTitleWidget virtual as Widget:
	return null

func createFooterWidget private as Widget
{
	// FIXME: Too many widgets
	var layer = LayerWidget.forContext(context)
	var fbw = createFooterBackgroundWidget()
	if fbw:
		layer.addWidget(fbw)
	var hbox = HorizontalBoxWidget.forContext(context, context.getWidthValue("1000um"), context.getWidthValue("2000um"))
	var line = createSeparator()
	var send = createSendButtonWidget()
	messageField = createMessageFieldWidget()
	var attachment = createAttachmentButton()
	if not send && not messageField:
		return null
	if messageField:
		hbox.addWidget(messageField, 1)
	if attachment {
		Widget.setWidgetClickHandler(attachment, func {
			onAttachmentWidgetClicked()
		})
		hbox.addWidget(attachment)
	}
	if send {
		Widget.setWidgetClickHandler(send, func {
			onSendWidgetClicked()
		})
		hbox.addWidget(send)
	}
	var vbox = new VerticalBoxWidget(context)
	vbox.addWidget(line)
	vbox.addWidget(hbox)
	layer.addWidget(vbox)
	return layer
}

func onAttachmentWidgetClicked
{
	var thisWidget final = this
	var ftype = "*/*"
	FileSelector.openFileDialog(thisWidget, ftype, func(buff as buffer, ff as string, mimeType as string, err as Error) {
		fileName = ff
		var pa = previewAttachment()
		if pa {
			Widget.removeChildrenOf(fileAttachment)
			if buff:
				fileAttachment.addWidget(pa)
		}
	})
}

func attachmentFilename as string:
	return fileName

func createSubHeaderWidget virtual as Widget:
	return null

func createSeparator abstract as Widget
func createMessageFieldWidget abstract as TextAreaWidget
func createSendButtonWidget abstract as Widget
func createAttachmentButton abstract as Widget
func previewAttachment abstract as Widget
func createMessageWidgetObject abstract as ChatMessageWidget
