
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.ui
import jk.widget
import jk.widget.common
import jk.log

class is LayerWidget abstract:

ctor(context as GuiApplicationContext)
{
	base(context)
	conversationMap = new DynamicMap()
}

prop manager as ChatManager
var active private = false
var conversationList private as VerticalBoxWidget
var conversationMap private as DynamicMap
var navi private as NavigationWidget
var currentConversationWidget private as ChatConversationWidget
var wideScreenContainer as Widget
var wideScreen = false
var narrowScreen = false

func isActive as bool:
	return active

func initializeWidget override
{
	base.initializeWidget()
	var bg = createBackgroundWidgetObject()
	if bg:
		addWidget(bg)
	navi = new NavigationWidget(context)
	navi.setWidgetEnableSidebar(false)
	navi.setWidgetEnableActionBar(false)
	addWidget(navi)
	active = true
}

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	if widthConstraint > context.getWidthValue("200mm") {
		wideScreenContainer = createChatContainerforWideScreen()
		assert wideScreenContainer
		if navi:
			Widget.removeChildrenOf(navi)
		if not wideScreen {
			wideScreen = true
			narrowScreen = false
			addWidget(wideScreenContainer)
		}
	}
	else {
		if wideScreenContainer && wideScreen == true {
			Widget.removeChildrenOf(this)
			wideScreen = false
		}
		if not narrowScreen {
			narrowScreen = true
			createChatContainerforNarrowScreen()
		}
	}
	base.computeWidgetLayout(widthConstraint)
}

func onNewMessageWidgetClicked protected
{
	if currentConversationWidget {
		Log.warning(context, "ChatWidget: Current ChatConversationWidget object not null!")
		return
	}
	currentConversationWidget = createChatConversationWidgetObject()
	assert currentConversationWidget {
		Log.error(context, "ChatWidget: No ChatConversationWidget instance returned!")
	}
	currentConversationWidget.setChatWidget(this)
	navi.pushWidget(currentConversationWidget)
}

func onMessageReceived(message as ChatMessage)
{
	assert message
	var channelId = assert message.getChannelId()
	var recipients = assert message.getRecipients()
	var ccw = conversationMap.get(channelId) as ChatConversationItemWidget
	if not ccw {
		ccw = createChatConversationItemWidgetObject()
		assert ccw:
			Log.error(context, "ChatWidget: Failed to create ChatConversationWidget object!")
		ccw.setChannelId(channelId)
		ccw.setRecipients(recipients)
		var ccwf final = ccw
		Widget.setWidgetClickHandler(ccw, func {
			onChatConversationWidgetClicked(ccwf)
		})
		conversationList.addWidget(ccw)
		conversationMap.setObject(channelId, ccw)
	}
	if currentConversationWidget {
		currentConversationWidget.onMessageReceived(message)
		var ccwf final = ccw
		Widget.setWidgetClickHandler(ccw, func {
			onChatConversationWidgetClicked(ccwf)
		})
	}
	ccw.onMessageReceived(message)
}

func onBackFromConversationWidget
{
	assert currentConversationWidget
	currentConversationWidget = null
	navi.popWidget()
}

func sendMessage(message as ChatMessage)
{
	assert (message && manager)
	manager.sendMessage(message)
}

func onChatConversationWidgetClicked(ccw as ChatConversationItemWidget) private
{
	currentConversationWidget = createChatConversationWidgetObject()
	assert currentConversationWidget.initialize(ccw) {
		currentConversationWidget = null
	}
	assert currentConversationWidget
	currentConversationWidget.setChatWidget(this)
	navi.pushWidget(currentConversationWidget)
}

func createBackgroundWidgetObject virtual as Widget:
	return null

func createNewMessageWidgetObject virtual as Widget:
	return null

func createChatContainerforNarrowScreen
{
	navi = new NavigationWidget(context)
	navi.setWidgetEnableSidebar(false)
	navi.setWidgetEnableActionBar(false)
	addWidget(navi)
	var vbox = VerticalBoxWidget.forContext(context)
	var nmw = createNewMessageWidgetObject()
	if nmw {
		vbox.addWidget(VerticalScrollerWidget.forWidget(context, conversationList = VerticalBoxWidget.forContext(context)), 1.0)
		Widget.setWidgetClickHandler(nmw, func {
			onNewMessageWidgetClicked()
		})
		vbox.addWidget(nmw)
	}
	else {
		vbox.addWidget(VerticalScrollerWidget.forWidget(context, conversationList = VerticalBoxWidget.forContext(context)))
	}
	navi.pushWidget(vbox)
}

func createChatContainerforWideScreen abstract as Widget
func createChatConversationItemWidgetObject abstract as ChatConversationItemWidget
func createChatConversationWidgetObject abstract as ChatConversationWidget
