
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.log

class:

func create(ctx as LoggingContext) static as this
{
	var v = new this()
	v.setApi(new ChatAPI().setCtx(ctx))
	v.setCtx(ctx)
	return v
}

prop ctx as LoggingContext
prop api as ChatAPI
prop chatWidget as ChatWidget
var queue private as DynamicVector

ctor
{
	conversationMap = new DynamicMap()
	queue = new DynamicVector()
}

func connect(url as string, authData as buffer)
{
	assert api {
		Log.error(ctx, "ChatManager: Failed to initialize. No 'ChatAPI' configured.")
	}
	assert chatWidget {
		Log.error(ctx, "ChatManager: Failed to initialize. No 'ChatWidget' configured.")
	}
	api.setOnOpenCallback(func {
		onOpenConnection()
	})
	api.setOnMessageCallback(func(message as ChatMessage) {
		onMessageReceived(message)
	})
	api.setOnErrorCallback(func {
		onErrorEvent()
	})
	api.setOnCloseCallback(func {
		onCloseEvent()
	})
	api.connect(url, authData)
}

func pushMessage(message as ChatMessage) private:
	queue.appendObject(message)

func popMessage as ChatMessage
{
	var m = queue.get(0) as ChatMessage
	if m != null:
		queue.remove(0)
	return m
}

func onOpenConnection private
{
	println "status: connected"
	// Handle status connected here
}

func onErrorEvent private
{
	// Handle error events here
}

func onCloseEvent private
{
	// Handle close events here like reconnect after 5 seconds
}

func onMessageReceived(message as ChatMessage) private
{
	assert message
	saveMessage(message)
	if chatWidget.isActive() == false {
		pushMessage(message)
		// FIXME: Fire up a notification
		return
	}
	chatWidget.onMessageReceived(message)
}

func getConversationChannelIds as DynamicVector:
	return conversationMap.getKeys()

var conversationMap private as DynamicMap

func saveMessage(message as ChatMessage) private
{
	assert message
	var channelId = assert message.getChannelId()
	var c = conversationMap.get(channelId) as DynamicVector
	if c == null {
		c = new DynamicVector()
		conversationMap.setObject(channelId, c)
	}
	c.appendObject(message)
}

func sendMessage(message as ChatMessage)
{
	assert message
	api.sendMessage(message)
}
