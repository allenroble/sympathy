
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.process
import jk.env

class:

func forDefault static as this
{
	var v = new this()
	v.initializeDefault()
	return v
}

prop eqelaCommand as string
prop repositories as vector<string>
prop ctx as LoggingContext

func initializeDefault
{
	eqelaCommand = EnvironmentVariable.get("EQELA_COMMAND")
	if String.isEmpty(eqelaCommand) {
		var eqf = ExternalCommand.findInPath("eqela")
		if eqf:
			eqelaCommand = eqf.getPath()
	}
}

func toProcessLauncher(command as string, args as vector<string>) private as ProcessLauncher
{
	assert String.isNotEmpty(command):
		Log.error(ctx, "Empty command given to EqelaContext")
	assert String.isNotEmpty(eqelaCommand):
		Log.error(ctx, "No eqela command found or specified.")
	var pl = assert ProcessLauncher.forString(eqelaCommand):
		Log.error(ctx, "Failed to create process launcher for command: `" .. eqelaCommand .. "'")
	foreach repository in repositories:
		pl.addToParams("-repository=" .. repository)
	pl.addToParams(command)
	foreach arg in args:
		pl.addToParams(arg)
	Log.debug(ctx, "Executing command: `" .. String.asString(pl) .. "'")
	return pl
}

func executeCommand(command as string, args as vector<string> = null) as bool
{
	var pl = assert toProcessLauncher(command, args)
	var v = pl.execute()
	if v != 0 {
		Log.debug(ctx, "Command `" .. command .. "' returned with errors status `" .. String.forInteger(v) .. "'")
		return false
	}
	return true
}

func executeFile(file as File, args as vector<string> = null) as bool
{
	assert file
	return executeCommand(file.getPath())
}

func startCommand(command as string, args as vector<string> = null) as Process
{
	var pl = assert toProcessLauncher(command, args)
	var v = assert pl.start():
		Log.debug(ctx, "Failed to start execution of command: `" .. command .. "'")
	return v
}

func startFile(file as File, args as vector<string> = null) as Process
{
	assert file
	return startCommand(file.getPath(), args)
}
