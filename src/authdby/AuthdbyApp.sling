
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.server.web.db
import jk.http.server
import jk.util.smtp
import symlib.auth

class is WebServerWithDatabase:

var smtpServer as string
var validationEmailTemplateFile as File
var recoveryEmailTemplateFile as File

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "smtpServer" {
		smtpServer = value
		return true
	}
	if key == "validationEmailTemplate" {
		validationEmailTemplateFile = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "recoveryEmailTemplate" {
		recoveryEmailTemplateFile = File.forRelativePath(value, relativeTo)
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	var engine = new AuthEngine()
	engine.setCtx(ctx)
	engine.setDb(getDb())
	assert engine.initializeDatabase()
	if String.isNotEmpty(smtpServer) {
		var sender = SMTPSender.forRemoteServerUrl(smtpServer)
		sender.setAcceptInvalidCertificate(true)
		sender.setCtx(ctx)
		engine.setSmtpSender(sender)
	}
	else {
		Log.warning(ctx, "No smtpServer defined. No emails will be sent.")
	}
	if validationEmailTemplateFile {
		var cc = assert validationEmailTemplateFile.getContentsUTF8():
			Log.error(ctx, "Failed to read email template file: `" .. validationEmailTemplateFile.getPath() .. "'")
		engine.setValidationEmailTemplate(cc)
	}
	else {
		Log.warning(ctx, "No validationEmailTemplate set. No validation emails will be sent.")
	}
	if recoveryEmailTemplateFile {
		var cc = assert recoveryEmailTemplateFile.getContentsUTF8():
			Log.error(ctx, "Failed to read email template file: `" .. recoveryEmailTemplateFile.getPath() .. "'")
		engine.setRecoveryEmailTemplate(cc)
	}
	else {
		Log.warning(ctx, "No recoveryEmailTemplate set. No recovery emails will be sent.")
	}
	var handler = new ApiHandler()
	handler.setEngine(engine)
	server.pushRequestHandler(handler)
	return true
}

main:
	return new this().executeMain(args)
