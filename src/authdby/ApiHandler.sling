
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.server.common
import symlib.auth

class #webapi:

model CreateSessionRequestModel
{
	address as string
	password as string
}

model SessionReferenceModel
{
	sessionid as string
}

model RegisterUserRequestModel
{
	address as string
}

model ValidateAddressRequestModel
{
	address as string
	secret as string
}

model AddUserAddressRequestModel
{
	address as string
}

model DeleteUserAddressRequestModel
{
	address as string
}

model ChangePasswordRequestModel
{
	oldPassword as string
	newPassword as string
}

model StartResetPasswordRequestModel
{
	address as string
}

model ResetPasswordRequestModel
{
	address as string
	secret as string
	newPassword as string
}

model CheckSessionRequestModel
{
	sessionid as string
}

model CheckSessionResponseModel
{
	userid as string
}

prop engine as AuthEngine

macro INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST
{
	var userid = req.getHeader("x-sympathy-apigwy-userid")
	assert String.isNotEmpty(userid):
		req.sendJSONError(ServerError.notAllowed())
	var sessionid = req.getHeader("x-sympathy-apigwy-sessionid")
	assert String.isNotEmpty(sessionid):
		req.sendJSONError(ServerError.notAllowed())
}

POST "createSession"
{
	receivePost login as CreateSessionRequestModel
	engine.createSessionWithCredentials(login.getAddress(), login.getPassword(), func(sessionid as string) {
		assert String.isNotEmpty(sessionid):
			sendError ServerError.invalidCredentials()
		var v = new SessionReferenceModel()
		v.setSessionid(sessionid)
		sendOk v
	})
}

POST "deleteSession"
{
	receivePost session as SessionReferenceModel
	engine.deleteSession(session.getSessionid(), func(v as bool) {
		assert v:
			sendError ServerError.failedToSave()
		sendOk
	})
}

POST "deleteUserSession"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	engine.deleteSession(sessionid, func(v as bool) {
		assert v:
			sendError ServerError.failedToSave()
		sendOk
	})
}

POST "registerUser"
{
	receivePost user as RegisterUserRequestModel
	engine.registerNewUser(user.getAddress(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "validateAddress"
{
	receivePost validation as ValidateAddressRequestModel
	engine.validateAddress(validation.getAddress(), validation.getSecret(), func(error as Error, sessionid as string) {
		assert not error:
			sendError error
		if String.isNotEmpty(sessionid) {
			var v = new SessionReferenceModel()
			v.setSessionid(sessionid)
			sendOk v
		}
		else {
			sendOk
		}
	})
}

POST "addUserAddress"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	receivePost data as AddUserAddressRequestModel
	engine.addUserAddressForSession(sessionid, data.getAddress(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "deleteUserAddress"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	receivePost data as DeleteUserAddressRequestModel
	engine.deleteUserAddressForSession(sessionid, data.getAddress(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "changePassword"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	receivePost data as ChangePasswordRequestModel
	engine.changePasswordForSession(sessionid, data.getOldPassword(), data.getNewPassword(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "startResetPassword"
{
	receivePost data as StartResetPasswordRequestModel
	engine.startResetPassword(data.getAddress(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "resetPassword"
{
	receivePost data as ResetPasswordRequestModel
	engine.resetPassword(data.getAddress(), data.getSecret(), data.getNewPassword(), func(error as Error) {
		assert not error:
			sendError error
		sendOk
	})
}

POST "checkSession"
{
	receivePost data as CheckSessionRequestModel
	engine.getSessionUser(data.getSessionid(), func(user as string) {
		assert user:
			sendError ServerError.notFound()
		var v = new CheckSessionResponseModel()
		v.setUserid(user)
		sendOk v
	})
}
