
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.sql
import jk.server.common

class #webapi:

prop db as SQLDatabase

func validateProfileDataField(key as string, val as string) private as bool
{
	assert key
	if key == "firstname" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	if key == "lastname" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	if key == "organization" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	return false
}

macro INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST
{
	var userid = req.getHeader("x-sympathy-apigwy-userid")
	assert String.isNotEmpty(userid):
		req.sendJSONError(ServerError.notAllowed())
	var sessionid = req.getHeader("x-sympathy-apigwy-sessionid")
	assert String.isNotEmpty(sessionid):
		req.sendJSONError(ServerError.notAllowed())
}

POST "getOwnProfile"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	var stmt = assert db.prepareSelectStatement("profile", new DynamicMap().setString("userid", userid)):
		req.sendJSONError(ServerError.internalError())
	db.querySingleRow(stmt, func(v as DynamicMap) {
		var vv = v
		if not vv:
			vv = new DynamicMap()
		vv.setString("userid", userid)
		req.sendJSONOK(vv)
	})
}

POST "updateOwnProfile"
{
	INIT_SYMPATHY_APIGWY_AUTHORIZED_REQUEST()
	var params = assert req.getBodyJSONMap():
		req.sendJSONError(ServerError.invalidRequest())
	assert params.getCount() > 0:
		req.sendJSONError(ServerError.invalidRequest())
	foreach key in params.getKeys() {
		assert validateProfileDataField(key, params.getString(key)):
			req.sendJSONError(ServerError.invalidRequest())
	}
	var criteria = new DynamicMap().setString("userid", userid)
	db.executeUpdateDelete(db.prepareUpdateStatement("profile", criteria, params), func(rows as int) {
		if rows < 1 {
			params.setString("userid", userid)
			db.executeUpdateDelete(db.prepareInsertStatement("profile", params), func(rows as int) {
				assert rows > 0:
					req.sendJSONError(ServerError.failedToSave())
				req.sendJSONOK()
			})
		}
		else {
			req.sendJSONOK()
		}
	})
}
