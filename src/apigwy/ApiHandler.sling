
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.io
import jk.log
import jk.web
import jk.http.server
import jk.server.common

class is HTTPServerRequestHandler:

prop ctx as LoggingContext
prop auth as AuthApi
prop endpoints = new map<string,Endpoint>
prop webClient as WebClient

func executeForwardedRequest(req as HTTPServerRequest, endpoint as Endpoint, userid as string, sessionid as string)
{
	var method = req.getMethod()
	var url = endpoint.getTarget()
	var headers = new KeyValueList<string,string>()
	if userid:
		headers.add("x-sympathy-apigwy-userid", userid)
	if sessionid:
		headers.add("x-sympathy-apigwy-sessionid", sessionid)
	var body = req.getBodyBuffer()
	if not body {
		if method == "POST" || method == "PUT" || method == "PATCH" {
			Log.debug(ctx, "Invalid POST/PUT/PATCH request without body received.")
			req.sendJSONError(ServerError.invalidRequest())
			return
		}
	}
	Log.debug(ctx, "Forwarding API request for `" .. endpoint.getMethod() .. "' to target `" .. endpoint.getTarget() .. "'")
	webClient.query(method, url, headers, body, func(status as string, headers as KeyValueList<string,string>, data as buffer) {
		Log.debug(ctx, "Forwarded API request to `" .. endpoint.getTarget() .. "' completed, status `" .. status .. "'")
		var resp = new HTTPServerResponse()
		resp.setStatus(status)
		if headers {
			var hdrsv = headers.asVector() as vector<KeyValuePair<string,string>>
			foreach header in hdrsv {
				var key = header.key
				if String.equalsIgnoreCase(key, "content-type") {
					var val = header.value as string
					resp.addHeader("Content-Type", val)
				}
			}
		}
		resp.setBody(BufferReader.forBuffer(data))
		req.sendResponse(resp)
	})
}

func handleRequest(req as HTTPServerRequest, next as function)
{
	var rsc = assert req.popResource() {
		Log.debug(ctx, "Request with no first resource: Ignoring.")
		next()
	}
	assert req.hasMoreResources() == false {
		Log.debug(ctx, "Request with too many resources: Ignoring.")
		req.unpopResource()
		next()
	}
	var endpoint = assert Map.get(endpoints, rsc) {
		Log.debug(ctx, "Request for unknown resource: `" .. rsc .. "'. Ignoring.")
		req.unpopResource()
		next()
	}
	if endpoint.getAuth() {
		Log.debug(ctx, "Received a request (authentication required) for API endpoint: `" .. endpoint.getMethod() .. "'")
		auth.handleAuthenticatedRequest(req, func(userid as string, sessionid as string, req as HTTPServerRequest) {
			Log.debug(ctx, "Authentication valid for sessionid `" .. sessionid .. "', user=`" .. userid .. "'")
			executeForwardedRequest(req, endpoint, userid, sessionid)
		})
	}
	else {
		Log.debug(ctx, "Received a request (no authentication required) for API endpoint: `" .. endpoint.getMethod() .. "'")
		executeForwardedRequest(req, endpoint, null, null)
	}
}
