
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.web
import jk.server.web
import jk.http.server

class is WebServer:

var auth as AuthApi = new AuthApiForDummy()
var endpoints = new map<string,Endpoint>
var maxRequestSize = 1024 * 1024

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "auth.url" {
		if value == "dummy" {
			auth = new AuthApiForDummy()
		}
		else {
			var asy = new AuthApiForSympathy()
			asy.setAuthServerUrl(value)
			auth = asy
		}
		return true
	}
	if key == "maxRequestSize" {
		maxRequestSize = String.toInteger(value)
		return true
	}
	var epswa = "api.endpoint.auth."
	if String.startsWith(key, epswa) {
		var method = String.getEndOfString(key, String.getLength(epswa))
		var target = value
		if String.isNotEmpty(method) && String.isNotEmpty(target):
			endpoints[method] = new Endpoint(method, target, true)
		return true
	}
	var epsna = "api.endpoint.noauth."
	if String.startsWith(key, epsna) {
		var method = String.getEndOfString(key, String.getLength(epsna))
		var target = value
		if String.isNotEmpty(method) && String.isNotEmpty(target):
			endpoints[method] = new Endpoint(method, target, false)
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	server.setSmallBodyLimit(maxRequestSize)
	var handler = new ApiHandler()
	handler.setCtx(ctx)
	handler.setAuth(auth)
	handler.setEndpoints(endpoints)
	handler.setWebClient(NativeWebClient.instance())
	server.pushRequestHandler(handler)
	return true
}

main:
	return new this().executeMain(args)
