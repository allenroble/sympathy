
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.web.json
import jk.http.server
import jk.server.common

class is AuthApi:

prop authServerUrl as string
var apiClient as JSONAPIClient

func getApiClient as JSONAPIClient
{
	if not apiClient {
		var url = getAuthServerUrl()
		if String.isNotEmpty(url) {
			apiClient = new JSONAPIClient()
			apiClient.setApiUrl(url)
		}
	}
	return apiClient
}

func sessionidToUserid(sessionid as string, callback as function<void,string>)
{
	// FIXME: Here we could and should implement a caching mechanism for the sessionid->userid mapping,
	// even if short term, 15/30 seconds or so...
	var api = assert getApiClient():
		callback(null)
	var params = new DynamicMap()
	params.setString("sessionid", sessionid)
	api.postWithStatus("checkSession", params, null, func(v as DynamicMap, error as Error) {
		assert error == null && v:
			callback(null)
		callback(v.getString("userid"))
	})
}

func handleAuthenticatedRequest(req as HTTPServerRequest, handler as function<void,string,string,HTTPServerRequest>)
{
	assert handler && req:
		req.sendJSONError(ServerError.internalError())
	var sessionid = req.getHeader("x-sessionid")
	assert String.isNotEmpty(sessionid):
		req.sendJSONError(ServerError.invalidRequest())
	sessionidToUserid(sessionid, func(userid as string) {
		assert String.isNotEmpty(userid):
			req.sendJSONError(ServerError.invalidSession())
		handler(userid, sessionid, req)
	})
}
