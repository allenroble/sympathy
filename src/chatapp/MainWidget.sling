
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.ui
import jk.widget.common
import chaty.client

class #widget #main:

class MyChatConversationWidget is ChatConversationWidget #widget
{
	ctor(context as GuiApplicationContext):
		base(context)

	func createMessageFieldWidget override as TextAreaWidget:
		return TextAreaWidget.forPlaceholder(context, "Message text")

	func createSendButtonWidget override as Widget:
		return LabelWidget.forText(context, "Send")

	func createMessageWidgetObject override as ChatMessageWidget:
		return new MyChatMessageWidget(context)
}

class MyChatConversationItemWidget is ChatConversationItemWidget #widget
{
	var label as LabelWidget

	ctor(context as GuiApplicationContext):
		base(context)

	func initializeWidget override
	{
		base.initializeWidget()
		addWidget(label = LabelWidget.forText(context, getChannelId()))
	}
}

class MyChatMessageWidget is ChatMessageWidget #widget
{
	var label as LabelWidget

	ctor(context as GuiApplicationContext):
		base(context)

	func initializeWidget override
	{
		base.initializeWidget()
		addWidget(label = LabelWidget.forText(context, getMessageText()))
	}
}

class MyChatWidget is ChatWidget #widget
{
	ctor(context as GuiApplicationContext):
		base(context)

	func createChatConversationItemWidgetObject override as ChatConversationItemWidget:
		return new MyChatConversationItemWidget(context)

	func createChatConversationWidgetObject override as ChatConversationWidget:
		return new MyChatConversationWidget(context)
}

prop manager as ChatManager
var serverAddress as TextInputWidget
var recipient as TextInputWidget
var username as TextInputWidget
var message as TextInputWidget
var status as LabelWidget

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	manager = ChatManager.create(ctx)
}

ui LayerWidget
{
	CanvasWidget {
		color = Color.white()
	}
	VerticalBoxWidget main {
		spacing = context.getWidthValue("2000um")
		margin = context.getWidthValue("2000um")
	}
}

func initializeWidget override
{
	base.initializeWidget()
	assert manager
	serverAddress = TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, "Server Address")
	serverAddress.setWidgetPadding(context.getHeightValue("4mm"))
	serverAddress.setWidgetFontSize(context.getHeightValue("3mm"))
	main.addWidget(serverAddress)
	recipient = TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, "Recipient")
	recipient.setWidgetPadding(context.getHeightValue("4mm"))
	recipient.setWidgetFontSize(context.getHeightValue("3mm"))
	main.addWidget(recipient)
	username = TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, "Username")
	username.setWidgetPadding(context.getHeightValue("4mm"))
	username.setWidgetFontSize(context.getHeightValue("3mm"))
	main.addWidget(username)
	message = TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, "Message")
	message.setWidgetPadding(context.getHeightValue("4mm"))
	message.setWidgetFontSize(context.getHeightValue("3mm"))
	main.addWidget(message)
	main.addWidget(TextButtonWidget.forText(context, "Send", func {
		var r = new DynamicVector()
		r.appendObject("John")
		r.appendObject("Doe")
		var m = new ChatMessage()
		m.setRecipients(r)
		m.setMessage(message.getWidgetText())
		manager.sendMessage(m)
	}))
	main.addWidget(status = new LabelWidget(context), 0)
	var chatWidget = new MyChatWidget(context)
	chatWidget.setManager(manager)
	main.addWidget(chatWidget, 1)
	manager.setChatWidget(chatWidget)
	main.addWidget(TextButtonWidget.forText(context, "Connect", func {
		var host = serverAddress.getWidgetText()
		if String.isEmpty(host):
			host = "ws://127.0.0.1:8080"
		manager.connect(host, String.toUTF8Buffer(username.getWidgetText()))
	}))
}
