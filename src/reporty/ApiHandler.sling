
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.sql
import jk.log
import symlib.report

class #webapi:

prop db as SQLDatabase
prop reportDir as File
prop ctx as LoggingContext

func validateReportName(name as string) as bool
{
	assert name
	assert String.getIndexOfCharacter(name, '/') < 0
	assert String.getIndexOfCharacter(name, '\\') < 0
	return true
}

func getDataSource as ReportDataSource:
	return SQLDataSource.forDatabase(db)

GET "pdf"
{
	var areport = assert req.getParameterAsString("report"):
		req.sendInvalidRequest()
	assert validateReportName(areport):
		req.sendInvalidRequest()
	var file = reportDir.entry(areport .. ".xml")
	var report = assert XMLReportParser.parseFile(ctx, file) {
		Log.error(ctx, "Failed to read report: `" .. file.getPath() .. "'")
		req.sendNotFound()
	}
	// FIXME: Set the formula values from request parameters
	var pr = new ReportProcessor()
	pr.setCtx(ctx)
	pr.setReport(report)
	pr.setDataSource(getDataSource())
	var data = assert pr.processToPdfBuffer() {
		Log.error(ctx, "Failed to generate PDF")
		req.sendInternalError()
	}
	req.sendBuffer(data, "application/pdf")
}
