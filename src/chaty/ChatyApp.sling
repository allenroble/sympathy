
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class is WebServerWithDatabase:

import capex.console
import capex.net
import sympathy
import sympathy.db
import capex.mysql
import capex.data
import sympathy.dbapp
import symlib.chat

var httpControlPort private = -1
var httpControlSecret private as string
var wsPort private = 9090
var authConfig private as DynamicMap
var chatEventConfig private as DynamicMap
var notificationForwarderConfig private as DynamicMap
var authTimeoutDelay private as long = 5
var authenticator private as Authenticator
var eventForwarder private as ChatEventForwarderOverHTTP
var forwarder private as NotificationForwarder
var engine private as ChatyEngine

main
{
	return new this().executeMain(args)
}

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "wsPort" {
		wsPort = String.toInteger(value)
		return true
	}
	if key == "httpControlSecret" {
		httpControlSecret = value
		return true
	}
	if key == "httpControlPort" {
		httpControlPort = String.toInteger(value)
		setListenPort(httpControlPort)
		return true
	}
	if "authConfig" == key {
		authConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if "chatEventConfig" == key {
		chatEventConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if "notificationForwarderConfig" == key {
		notificationForwarderConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if key == "authTimeoutDelay" {
		authTimeoutDelay = LongInteger.asLong(value)
		if authTimeoutDelay < 0:
			authTimeoutDelay = 0
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeApplication override as bool
{
	assert base.initializeApplication()
	assert authConfig:
		Log.error(ctx, "Please configure authentication service with the parameter key: 'authConfig'.")
	authenticator = AuthenticatorOverHTTP.forConfiguration(authConfig)
	assert authenticator:
		Log.error(ctx, "Failed to initialize authenticator. Please check your authentication service configuration.")
	if chatEventConfig:
		eventForwarder = ChatEventForwarderOverHTTP.forConfiguration(chatEventConfig)
	assert notificationForwarderConfig:
		Log.error(ctx, "Please configure notification forwarder service with the parameter key: 'notificationForwarderConfig'.")
	forwarder = NotificationForwarderOverHTTP.forConfiguration(notificationForwarderConfig)
	assert forwarder:
		Log.error(ctx, "Failed to initialize notification forwarder. Please check your notification forwarder service configuration.")
	return true
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert getListenPort() != wsPort:
		Log.error(ctx, "WebSocket port should not be the same with HTTP port.")
	assert wsPort > 1023 && wsPort < 65536:
		Log.error(ctx, "WebSocket port should be between 1024 and 65535.")
	engine = ChatyEngine.create(wsPort, getDb(), authenticator, eventForwarder, forwarder, ctx)
	assert engine:
		Log.error(ctx, "Failed to create chat engine instance.")
	engine.setAuthTimeoutDelay(authTimeoutDelay)
	if httpControlPort > 0 {
		if String.isNotEmpty(httpControlSecret) {
			server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
				assert String.equals(httpControlSecret, req.getHeader("x-http-control-secret")):
					req.sendJSONObject(JSONResponse.forNotAuthenticated())
				next()
			})
		}
		var rootHandler = new HTTPControlAPIHandler()
		rootHandler.setEngine(engine)
		server.pushRequestHandler(rootHandler)
	}
	return true
}

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) override as bool
{
	assert engine.initializeEngine(ioManager)
	return true
}

func initializeSQLDatabase(config as DynamicMap) override as SQLDatabase
{
	config.set("sslMode", MySQLDatabase.SSL_MODE_NONE)
	config.set("enableUTF8",true)
	return SQLDatabaseProvider.getDatabase(ctx, config)
}
