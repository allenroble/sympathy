
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class #webapi:

var engine protected as ChatyEngine

func setEngine(engine as ChatyEngine):
	this.engine = engine

GET "getUserIdsAssociatedWithUserId/*"
{
	var userId = req.popResource()
	assert String.isNotEmpty(userId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.getUserIdsAssociatedWithUserId(userId, func(list as DynamicVector, error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk(list))
	})
}

POST "createChannelForExternalId"
{
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var recipients = data.getDynamicVector("recipients")
	assert recipients && recipients.getSize() > 1:
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var creatorUserId = data.getString("userId")
	var title = data.getString("title")
	assert String.isNotEmpty(creatorUserId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var externalId = data.getString("externalId")
	assert String.isNotEmpty(externalId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.createChannelForExternalIdAndGetChannelId(externalId, creatorUserId, title, recipients, func(channelId as string, error as Error) {
		assert not error:
			req.sendJSONObject(JSONResponse.forError(error))
		assert String.isNotEmpty(channelId):
			req.sendJSONObject(JSONResponse.forInternalError())
		var v = new DynamicMap()
		v.set("channelId", channelId)
		req.sendJSONObject(JSONResponse.forOk(v))
	})
}

PUT "updateRecipientsForChannelId/*"
{
	var channelId = req.popResource()
	assert String.isNotEmpty(channelId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.updateRecipientsForChannelId(channelId, data.getDynamicVector("recipients"), func(error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk())
	})
}

PUT "updateRecipientsForExternalId/*"
{
	var externalId = req.popResource()
	assert String.isNotEmpty(externalId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.updateRecipientsForExternalId(externalId, data.getDynamicVector("recipients"), func(error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk())
	})
}

POST "sendDataMessage"
{
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.onDataMessageFromHTTPControl(data, func(error as Error) {
		assert not error:
			req.sendJSONObject(JSONResponse.forError(error))
		req.sendJSONObject(JSONResponse.forOk())
	})
}

POST "broadcastMessage"
{
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.broadcastMessageFromHTTPControl(data.getString("messageId"), func(error as Error) {
		assert not error:
			req.sendJSONObject(JSONResponse.forError(error))
		req.sendJSONObject(JSONResponse.forOk())
	})
}

DELETE "deleteChannelForExternalId/*"
{
	receivePath externalId
	assert String.isNotEmpty(externalId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.deleteChannelForExternalId(externalId, func(error as Error) {
		assert not error:
			sendObject JSONResponse.forError(error)
		sendOk
	})
}
