
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.io
import jk.log
import jk.sql
import jk.sql.factory
import jk.server.web
import jk.http.server
import jk.http.server.sql
import jk.console
import jk.base64

class is WebServer:

func main(args as array<string>) static as int #main:
	return new this().execute(args) ? 0 : 1

var dbs as map<string,string>

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key && String.startsWith(key, "db-") {
		var dbname = String.getEndOfString(key, 3)
		if String.isNotEmpty(dbname) {
			if not dbs:
				dbs = new map<string,string>
			dbs[dbname] = value
		}
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func printHeader(stdout as PrintWriter) override:
	ConsoleApplicationUtil.printHeader(Stdout.instance(), VALUE "sling_project_title", VALUE "sling_project_version", VALUE "sling_project_copyright", VALUE "sling_project_license", VALUE "target_platform")

func printVersion(stdout as PrintWriter, longFormat as bool) override:
	ConsoleApplicationUtil.printVersion(Stdout.instance(), VALUE "sling_project_version", VALUE "sling_project_title")

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert dbs:
		Log.error(ctx, "No databases configured. Configure `db-*' options first.")
	var keys as vector<string> #force = Map.getKeys(dbs)
	var map = new HTTPServerRequestHandlerMap()
	foreach key in keys {
		var value = dbs[key]
		var accessToken as string
		var connectionString as string
		if String.getIndexOfCharacter(value, '@') >= 0 {
			var comps = String.split(value, '@', 2)
			accessToken = comps[0]
			connectionString = comps[1]
		}
		else {
			accessToken = ""
			connectionString = value
		}
		var db = assert SQLDatabaseFactory.getDatabase(ctx, connectionString):
			Log.error(ctx, "Invalid connection string: `" .. connectionString .. "'")
		var stack = new HTTPServerRequestHandlerStack()
		stack.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
			if String.isNotEmpty(accessToken) {
				var rqtoken = req.getHeader("x-access-token")
				if not rqtoken:
					rqtoken = req.getQueryParameter("accessToken")
				assert String.equals(accessToken, rqtoken):
					req.sendJSONObject(HTTPServerJSONResponse.forNotAllowed())
			}
			next()
		})
		stack.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
			if req.isGET() {
				var sqlStatement = req.getQueryParameter("sqlStatement")
				assert String.isNotEmpty(sqlStatement):
					req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
				var v = db.query(db.prepare(sqlStatement))
				if not v {
					req.sendJSONObject(HTTPServerJSONResponse.forInternalError())
				}
				else {
					req.startResponseWorker(HTTPServerSQLResultSetToJSONResponseWorker.forResultSet(v))
				}
			}
			else if req.isPOST() {
				var body = assert req.getBodyJSONMap():
					req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
				var sqlStatement = body.getString("sqlStatement")
				assert String.isNotEmpty(sqlStatement):
					req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
				var params = body.getDynamicVector("sqlParameters")
				var stmt = assert db.prepare(sqlStatement):
					req.sendJSONObject(HTTPServerJSONResponse.forInternalError())
				stmt.setIsStoredProcedure(body.getBoolean("isStoredProcedure"))
				if params && params.getSize() > 0 {
					foreach p as DynamicMap in params.toVector() {
						var dt = p.getString("dataType")
						if "string" == dt {
							stmt.setParamString(p.getString("parameterName"), p.getString("value"))
						}
						else if "integer" == dt {
							stmt.setParamInteger(p.getString("parameterName"), p.getInteger("value"))
						}
						else if "double" == dt {
							stmt.setParamDouble(p.getString("parameterName"), p.getDouble("value"))
						}
						else if "blob" == dt {
							stmt.setParamBlob(p.getString("parameterName"), Base64Decoder.decode(p.getString("value")))
						}
						else {
							req.sendJSONObject(HTTPServerJSONResponse.forInvalidData("dataType"))
							return
						}
					}
				}
				var tableName = body.getString("tableName")
				var action = body.getString("action")
				var bb = String.toLowerCase(String.getSubString(sqlStatement, 0, 6))
				var insert = bb == "insert" ? true : false
				if insert {
					assert String.isNotEmpty(tableName):
						req.sendJSONObject(HTTPServerJSONResponse.forMissingData("tableName"))
				}
				if String.isEmpty(action):
					action = bb == "select" ? "query" : "nonQuery"
				if "query" == action {
					var v = db.query(stmt)
					if not v {
						req.sendJSONObject(HTTPServerJSONResponse.forInternalError())
					}
					else {
						req.startResponseWorker(HTTPServerSQLResultSetToJSONResponseWorker.forResultSet(v))
					}
				}
				else {
					var result = db.execute(stmt)
					assert result:
						req.sendJSONObject(HTTPServerJSONResponse.forInternalError())
					if insert {
						var v = new DynamicMap()
						v.setString("name", db.getIdentityColumnName(tableName))
						v.setLong("id", db.getLastInsertId(tableName))
						assert v:
							req.sendJSONObject(HTTPServerJSONResponse.forInternalError())
						req.sendJSONObject(HTTPServerJSONResponse.forOk(v))
						return
					}
					req.sendJSONObject(HTTPServerJSONResponse.forOk())
				}
			}
			else {
				req.sendJSONObject(HTTPServerJSONResponse.forInvalidRequest())
			}
		})
		map.child(key, stack)
	}
	server.pushRequestHandler(map)
	return true
}
