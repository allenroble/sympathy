
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import cape
import capex.text
import capex.console
import sympathy
import symlib.article
import sympathy.app

class is WebServer:

prop siteDirectory as File
prop dataDirectory as File
prop themeDirectory as File
prop publicDirectory as File
prop siteData as DynamicMap
prop urlPrefix as string
prop defaultCategory as string
prop categoryPathSuffix as string
prop apiSecret as string
prop serverMode = "web"

func printHeader(stdout as PrintWriter) override:
	ConsoleApplicationUtil.printHeader(Stdout.instance(), VALUE "sling_project_title", VALUE "sling_project_version", VALUE "sling_project_copyright", VALUE "sling_project_license", VALUE "target_platform")

func printVersion(stdout as PrintWriter, longFormat as bool) override:
	ConsoleApplicationUtil.printVersion(Stdout.instance(), VALUE "sling_project_version", VALUE "sling_project_title")

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if base.configure(key, value, relativeTo, error):
		return true
	if key == "siteDirectory" {
		siteDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "dataDirectory" {
		dataDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "themeDirectory" {
		themeDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "publicDirectory" {
		publicDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "urlPrefix" {
		urlPrefix = value
		return true
	}
	if key == "defaultCategory" {
		defaultCategory = value
		return true
	}
	if key == "categoryPathSuffix" {
		categoryPathSuffix = value
		return true
	}
	if key == "siteData" {
		siteData = JSONParser.parse(value) as DynamicMap
		assert siteData:
			error.setMessage("Invalid value for `siteData'")
		return true
	}
	if key == "serverMode" {
		serverMode = value
		return true
	}
	if key == "apiSecret" {
		apiSecret = value
		return true
	}
	return false
}

func getNotFoundHtml(ctx as LoggingContext) as string
{
	assert themeDirectory
	var nf = themeDirectory.entry("notfound.html.t")
	assert nf.isFile()
	var str = nf.getContentsString("UTF-8")
	assert String.isNotEmpty(str)
	var dirs = new vector<File>
	dirs += themeDirectory
	var tt = assert TextTemplate.forHTMLString(str, dirs, null, ctx)
	var dd = new DynamicMap()
	dd.set("site", siteData)
	return tt.execute(dd)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	HTTPServerBase.UPDATE_SERVER_NAME(server, VALUE "sling_project_title", VALUE "sling_project_version")
	if siteDirectory == null:
		siteDirectory = getConfigFileDirectory()
	if siteDirectory && siteDirectory.isDirectory() == false {
		Log.error(ctx, "Site directory does not exist: `" .. siteDirectory.getPath() .. "'")
		return false
	}
	if siteDirectory {
		if dataDirectory == null {
			var d = siteDirectory.entry("data")
			if d.isDirectory():
				dataDirectory = d
		}
		if themeDirectory == null {
			var d = siteDirectory.entry("theme")
			if d.isDirectory() {
				themeDirectory = d
			}
			else {
				Log.error(ctx, "Theme directory does not exist: `" .. d.getPath() .. "'")
				return false
			}
		}
		if publicDirectory == null {
			var d = siteDirectory.entry("public")
			if d.isDirectory():
				publicDirectory = d
		}
	}
	assert dataDirectory:
		Log.error(ctx, "No valid data directory was specified. Either specify `siteDirectory' or `dataDirectory'")
	assert themeDirectory:
		Log.error(ctx, "No valid theme directory was specified.")
	var repository = assert ArticleRepositoryDirectory.forDirectory(ctx, dataDirectory):
		Log.error(ctx, "Failed to create article repository for data directory: `" .. dataDirectory.getPath() .. "'")
	if serverMode == "web" {
		var templateData = new DynamicMap()
		templateData.set("urlPrefix", urlPrefix)
		templateData.set("site", siteData)
		var handler = ArticleWebHandler.forRepository(repository)
		handler.setDefaultCategory(defaultCategory)
		handler.setCategoryPathSuffix(categoryPathSuffix)
		handler.setTemplateData(templateData)
		handler.setTemplateStorage(TemplateStorageUsingFiles.forHTMLTemplateDirectory(themeDirectory))
		server.pushRequestHandler(handler)
		var themeStaticHandler = HTTPServerDirectoryHandler.forDirectory(themeDirectory)
		themeStaticHandler.setTemplateData(templateData)
		themeStaticHandler.setListDirectories(false)
		themeStaticHandler.setProcessTemplateFiles(true)
		themeStaticHandler.setIndexFiles([ "index.html", "index.html.t" ])
		server.pushRequestHandler(themeStaticHandler)
		if publicDirectory && publicDirectory.isDirectory() {
			var ph = HTTPServerDirectoryHandler.forDirectory(publicDirectory)
			ph.setListDirectories(false)
			ph.setProcessTemplateFiles(false)
			ph.setIndexFiles([ "index.html" ])
			server.pushRequestHandler(ph)
		}
		server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
			var nf = getNotFoundHtml(ctx)
			if nf == null:
				next()
			req.sendHTMLString(nf)
		})
	}
	/* FIXME: Admin API handler currently not available in the library
	else if serverMode == "api" {
		// support the posting of large documents
		server.setSmallBodyLimit(1024 * 1024)
		if apiSecret {
			server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
				var secret = req.getHeader("x-secret")
				if secret && secret == apiSecret {
					next()
				}
				else {
					req.sendNotAllowed()
				}
			})
		}
		server.pushRequestHandler(ArticleAdminAPIHandler.forRepository(repository))
	}
	*/
	else {
		Log.error(ctx, "Unsupported server mode: `" .. serverMode .. "'")
		return false
	}
	return true
}

main
{
	if new this().execute(args) == false:
		return 1
	return 0
}
